prompt,completion,result
"A fishery wants to transport their catch. They can either use local sled dogs or trucks. Local sled dogs and trucks can take different amount of fish per trip. Also, the cost per trip for sled dogs and truck is also differs. You should note that the budget has an upper limit and the number of sled dog trips must be less than the number of truck trips. Formulate an LP to maximize the number of fish that can be transported. DogCapability = 100, TruckCapability = 300, DogCost = 50, TruckCost = 100, MaxBudget = 1000","#miss match
from pulp import *

# Parameters
DogCapability = 100
TruckCapability = 300
DogCost = 50
TruckCost = 100
MaxBudget = 1000

# Create a LP problem
prob = LpProblem(""Maximize Fish Transport"", LpMaximize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of sled dog trips
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of truck trips

# Objective function
prob += DogCapability * x + TruckCapability * y, ""Total fish transported""

# Constraints
prob += DogCost * x + TruckCost * y <= MaxBudget, ""Budget constraint""
prob += x <= y - 1, ""Trip constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",3000
An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of 200 per printer while black and white printers generate a profit of 70 per printer. How many of each printer should be made to maximize the company's profit?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of color printers
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of black and white printers

# Objective function
prob += 200 * x + 70 * y, ""Total_Profit""

# Constraints
prob += x <= 20, ""ColorPrinterLimit""
prob += y <= 30, ""BWPrinterLimit""
prob += x + y <= 35, ""MachineLimit""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",5050
"An accounting firm has senior accountants earning 3000 per week and junior accountants earning 1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.","from pulp import *

# Define the LP minimization problem
prob = LpProblem(""Minimize_Wage_Bill"", LpMinimize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of senior accountants
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of junior accountants

# Objective function
prob += 3000 * x + 1000 * y, ""Total_Wage_Bill""

# Constraints
prob += x + y >= 100, ""TotalAccountantsConstraint""
prob += x >= 5, ""MinSeniorAccountantsConstraint""
prob += x >= (1/3) * y, ""ExperienceConstraint""
prob += 3000 * x + 1000 * y <= 150000, ""WageBillConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",150000
Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is 2 and the profit per pear is 4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Acres of apples
y = LpVariable('y', lowBound=0, cat='Continuous')  # Acres of pears

# Objective function
prob += 2 * x + 4 * y, ""Total_Profit""

# Constraints
prob += x + y <= 50, ""TotalAcreageConstraint""
prob += x >= 5, ""MinApplesConstraint""
prob += y >= 10, ""MinPearsConstraint""
prob += y <= 2 * x, ""PearsToApplesConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",166.666666
"A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is 5 and the profit per night-lamp sold is 8, how many lamps of each type should be made to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of desk-lamps
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of night-lamps

# Objective function
prob += 5 * x + 8 * y, ""Total_Profit""

# Constraints
prob += x >= 30, ""MinDeskLampsConstraint""
prob += y >= 50, ""MinNightLampsConstraint""
prob += x <= 150, ""MaxDeskLampsConstraint""
prob += y <= 180, ""MaxNightLampsConstraint""
prob += x + y >= 100, ""TotalProductionConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2190
"Mr. Roberts want to invest in the telecom and healthcare industries. He has 100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most 70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Profit"", LpMaximize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Amount invested in telecom
y = LpVariable('y', lowBound=0, cat='Continuous')  # Amount invested in healthcare

# Objective function
prob += 0.03 * x + 0.01 * y, ""Total Profit""

# Constraints
prob += x + y <= 100000, ""Total investment constraint""
prob += x >= 3 * y, ""Telecom investment constraint""
prob += x <= 70000, ""Maximum telecom investment""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2333.33333
"A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is 350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Hectares of tomatoes
y = LpVariable('y', lowBound=0, cat='Continuous')  # Hectares of potatoes

# Objective function
prob += 350 * x + 600 * y, ""Total_Profit""

# Constraints
prob += x + y <= 140, ""TotalLandConstraint""
prob += x >= 20, ""MinTomatoesConstraint""
prob += y >= 30, ""MinPotatoesConstraint""
prob += x <= 2 * y, ""TomatoesToPotatoesConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",79000
"A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is 50 and the profit per wireless headphone 20. How many of each headphone should be made to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of wired headphones
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of wireless headphones

# Objective function
prob += 50 * x + 20 * y, ""Total_Profit""

# Constraints
prob += x <= 100, ""MaxWiredHeadphonesConstraint""
prob += y <= 170, ""MaxWirelessHeadphonesConstraint""
prob += x + y <= 150, ""AudioTestingMachineConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",6000
"Jacob has 3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most 500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Amount invested in the clothing company
y = LpVariable('y', lowBound=0, cat='Continuous')  # Amount invested in the tech company

# Objective function
prob += 0.07 * x + 0.10 * y, ""Total_Profit""

# Constraints
prob += x + y <= 3000, ""TotalInvestmentConstraint""
prob += x >= 4 * y, ""InvestmentRatioConstraint""
prob += y <= 500, ""MaxTechInvestmentConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",225
"Each month a store owner can spend at most 500 on carrots and cucumbers. A carrot costs the store owner 0.30 and a cucumber costs the store owner 0.50. Each carrot is sold for a profit of 0.75 and each cucumber is sold for a profit of 0.80. The owner estimates that the number of cucumbers sold is at most a third of the number of carrots sold. He also estimates that at least 300 carrots but at most 500 carrots are sold each month. How many of each, carrots and cucumbers, should be sold in order to maximize the profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of carrots sold
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of cucumbers sold

# Objective function
prob += 0.75 * x + 0.80 * y, ""Total_Profit""

# Constraints
prob += 0.30 * x + 0.50 * y <= 500, ""TotalCostConstraint""
prob += y <= (1/3) * x, ""CucumberToCarrotRatioConstraint""
prob += x >= 300, ""MinCarrotsConstraint""
prob += x <= 500, ""MaxCarrotsConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",508.333336
"A farmer wants to manufacture a special plant nutrition using fertilizers A and B. Each kg of fertilizer A contains 13 units of nitrogen, 5 units of phosphoric acid, 6 units of vitamin A and 5 units of vitamin D. Each kg of fertilizer B contains 8 units of nitrogen, 14 units of phosphoric acid, 6 units of vitamin A and 9 units of vitamin D. To be effective, the plant nutrition requires a minimum 220 units of nitrogen, a minimum of 160 units of phosphoric acid, and no more than 350 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin D in the nutrition? What is the minimum amount of vitamin D?","from pulp import *

# Define the LP minimization problem
prob = LpProblem(""Minimize_Vitamin_D"", LpMinimize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # kg of fertilizer A
y = LpVariable('y', lowBound=0, cat='Continuous')  # kg of fertilizer B

# Objective function
prob += 5 * x + 9 * y, ""Total_Vitamin_D""

# Constraints
prob += 13 * x + 8 * y >= 220, ""NitrogenConstraint""
prob += 5 * x + 14 * y >= 160, ""PhosphoricAcidConstraint""
prob += 6 * x + 6 * y <= 350, ""VitaminAConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",125.4929565
"Mrs. Watson wants to invest in the real-estate market and has a total budget of at most 760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a 0.50 profit and each dollar invested in detached houses yields a 1 profit. A minimum of 20% of all money invested must be in condos, and at least 20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Amount invested in condos
y = LpVariable('y', lowBound=0, cat='Continuous')  # Amount invested in detached houses

# Objective function
prob += 0.50 * x + 1.00 * y, ""Total_Profit""

# Constraints
prob += x + y <= 760000, ""TotalBudgetConstraint""
prob += x >= 0.20 * (x + y), ""MinCondoInvestmentConstraint""
prob += y >= 20000, ""MinDetachedHouseInvestmentConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",684000
A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of 3 per regular sandwich and a profit of 4 per special sandwich. How many of each sandwich should be made to maximize profit?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of regular sandwiches
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of special sandwiches

# Objective function
prob += 3 * x + 4 * y, ""Total_Profit""

# Constraints
prob += 2 * x + 3 * y <= 40, ""EggsConstraint""
prob += 3 * x + 5 * y <= 70, ""BaconConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",60
"A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their 250,000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs 5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Exposure"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=15, upBound=40, cat='Integer')  # Number of radio ads
y = LpVariable('y', lowBound=35, cat='Integer')             # Number of social media ads

# Objective function
prob += 60500 * x + 50000 * y, ""Total_Exposure""

# Constraints
prob += 5000 * x + 9150 * y <= 250000, ""BudgetConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a 12 profit and each short cable sold results in a 5 profit, how many of each type of cable should be made to maximize profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Profit"", LpMaximize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of long cables
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of short cables

# Objective function
prob += 12 * x + 5 * y, ""Total Profit""

# Constraints
prob += 10 * x + 7 * y <= 1000, ""Total gold constraint""
prob += y >= 5 * x, ""Short cables requirement""
prob += x >= 10, ""Minimum long cables""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",819
"A store employs senior citizens who earn 500 per week and young adults who earn 750 per week. The store must keep the weekly wage bill below 30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Wage Bill"", LpMinimize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of senior citizens
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of young adults

# Objective function
prob += 500 * x + 750 * y, ""Total Wage Bill""

# Constraints
prob += 500 * x + 750 * y <= 30000, ""Weekly wage bill constraint""
prob += x + y >= 50, ""Minimum number of workers""
prob += y >= 10, ""Minimum number of young adults""
prob += y >= (1/3) * x, ""Ratio of young adults to senior citizens""

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs 1000 and attracts 400,000 viewers. On soorchle, each ad costs 200 and attracts 5,000 viewers. On wassa, each ad costs 100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is 10000. How many advertisements should be run in each of the three types of media to maximize the total audience?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Audience"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of ads on z-tube
y = LpVariable('y', lowBound=0, upBound=15, cat='Integer')  # Number of ads on soorchle
z = LpVariable('z', lowBound=0, cat='Integer')  # Number of ads on wassa

# Objective function
prob += 400000 * x + 5000 * y + 3000 * z, ""Total_Audience""

# Constraints
prob += 1000 * x + 200 * y + 100 * z <= 10000, ""BudgetConstraint""
prob += x >= 0.05 * (x + y + z), ""Min_ZTubeConstraint""
prob += z <= 1/3 * (x + y + z), ""Max_WassaConstraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",4000000
"A chair produced by Elm Furniture yields a profit of 43, while every dresser yields a 52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of chairs
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of dressers

# Objective function
prob += 43 * x + 52 * y, ""Total_Profit""

# Constraints
prob += 1.4 * x + 1.1 * y <= 17, ""Stain_Constraint""
prob += 2 * x + 3 * y <= 11, ""Oak_Wood_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",224
"A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs 100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs 80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.","from pulp import *

# Define the LP minimization problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Kilograms of Feed A
y = LpVariable('y', lowBound=0, cat='Continuous')  # Kilograms of Feed B

# Objective function
prob += 100 * x + 80 * y, ""Total_Cost""

# Constraints
prob += 10 * x + 7 * y >= 30, ""Protein_Constraint""
prob += 8 * x + 15 * y >= 50, ""Fat_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",327.659572
"An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is 5 and the profit per stubby jar is 9. How many jars of each type should the artisan make to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of thin jars
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of stubby jars

# Objective function
prob += 5 * x + 9 * y, ""Total_Profit""

# Constraints
prob += 50 * x + 30 * y <= 3000, ""Shaping_Time_Constraint""
prob += 90 * x + 150 * y <= 4000, ""Baking_Time_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",239
"A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of banana-haters packages
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of combo packages

# Objective function
prob += 6 * x + 7 * y, ""Total_Profit""

# Constraints
prob += 6 * x + 5 * y <= 10, ""Apples_Constraint""
prob += 6 * y <= 20, ""Bananas_Constraint""
prob += 30 * x + 20 * y <= 80, ""Grapes_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",14
A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is 5 and the profit per batch of cookies is 3. How should the bakery operate to maximize total profit?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Number of loaves of bread
y = LpVariable('y', lowBound=0, cat='Continuous')  # Number of batches of cookies

# Objective function
prob += 5 * x + 3 * y, ""Total_Profit""

# Constraints
prob += x + 0.5 * y <= 3000, ""StandMixer_Constraint""
prob += 3 * x + y <= 3000, ""Oven_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",9000
A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is 8 and the profit per pane of tempered glass is 10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?,"#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Profit"", LpMaximize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of regular glass panes
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of tempered glass panes

# Objective function
prob += 8 * x + 10 * y, ""Total Profit""

# Constraints
prob += 3 * x + 5 * y <= 300, ""Heating machine time constraint""
prob += 5 * x + 8 * y <= 300, ""Cooling machine time constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",480
"A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is 5 and the profit per tiger sold is 4. How many of each should be made in order to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of elephants
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of tigers

# Objective function
prob += 5 * x + 4 * y, ""Total_Profit""

# Constraints
prob += 50 * x + 40 * y <= 5000, ""Wood_Constraint""
prob += 20 * x + 30 * y <= 4000, ""Plastic_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",500
"An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is 30 and the profit per small art piece is 15, how many of each should be made to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=5, cat='Integer')  # Number of large art pieces
y = LpVariable('y', lowBound=5, cat='Integer')  # Number of small art pieces

# Objective function
prob += 30 * x + 15 * y, ""Total_Profit""

# Constraints
prob += 4 * x + 2 * y <= 100, ""Paint_Constraint""
prob += 3 * x + y <= 50, ""Glitter_Constraint""
prob += 5 * x + 2 * y <= 70, ""Glue_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",480
"My family has decided to invest in real state for the first time. Currently, they have 600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than 200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses. If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, upBound=200000, cat='Continuous')  # Investment in apartments
y = LpVariable('y', lowBound=0, cat='Continuous')  # Investment in townhouses

# Objective function
prob += 0.10 * x + 0.15 * y, ""Total_Profit""

# Constraints
prob += x + y <= 600000, ""Total_Investment_Constraint""
prob += x >= 0.5 * y, ""Minimum_Apartment_Investment""
prob += x <= 200000, ""Maximum_Apartment_Investment""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",80000
"My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is 1 and the cost per pill of Sunny is 3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.","from pulp import *

# Define the LP minimization problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Pills of Zodiac
y = LpVariable('y', lowBound=0, cat='Integer')  # Pills of Sunny

# Objective function: minimize cost
prob += x + 3 * y, ""Total_Cost""

# Constraints
prob += 1.3 * x + 1.2 * y >= 5, ""Z1_Requirement""
prob += 1.5 * x + 5 * y >= 10, ""D3_Requirement""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",7
"A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is 8 and the profit per model plane is 10, how many of each should be made to maximize his profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of model trains
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of model planes

# Objective function: maximize profit
prob += 8 * x + 10 * y, ""Total_Profit""

# Constraints
prob += 3 * x + 4 * y <= 120, ""Wood_Constraint""
prob += 3 * x + 2 * y <= 90, ""Paint_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",310
"An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store 120 in profits, and a laptop will earn 40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs 400 for the store, and a laptop, 100. The store wants to spend at most 6000. Formulate an LP that can be used to maximize the store's profit.","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of phones
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of laptops

# Objective function: maximize profit
prob += 120 * x + 40 * y, ""Total_Profit""

# Constraints
prob += x + 4 * y <= 400, ""Floor_Space_Constraint""
prob += y >= 0.8 * (x + y), ""Laptop_Percentage_Constraint""
prob += 400 * x + 100 * y <= 6000, ""Budget_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2400
"A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is 3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is 5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0)  # Kilograms of regular mix
y = LpVariable('y', lowBound=0)  # Kilograms of sour surprise mix

# Objective function: maximize profit
prob += 3 * x + 5 * y, ""Total_Profit""

# Constraints
prob += 0.8 * x + 0.1 * y <= 80, ""Regular_Candy_Constraint""
prob += 0.2 * x + 0.9 * y <= 60, ""Sour_Candy_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",511.428572
A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost 12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost 15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of 50 per sq. foot while laptops produce a net revenue of 70 per sq. foot. The factory wants to spend at most 5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Revenue"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Square feet for phone production
y = LpVariable('y', lowBound=0, cat='Continuous')  # Square feet for laptop production

# Objective function: maximize revenue
prob += 50 * x + 70 * y, ""Total_Revenue""

# Constraints
prob += x + y <= 100, ""Space_Constraint""
prob += 12 * x + 15 * y <= 5000, ""Cost_Constraint""
prob += 2 * x + 3 * y <= 2000, ""Labor_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",7000
A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store 2000 to make and yields a profit of 500. Each regular desktop costs the store 1000 to make and yields a profit of 300. The store sells at most 200 desktops each month and wants to spend at most 300000 on making the desktops. How many of each should be made and sold to maximize profit?,"from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of premium desktops
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of regular desktops

# Objective function: maximize profit
prob += 500 * x + 300 * y, ""Total_Profit""

# Constraints
prob += x + y <= 200, ""Production_Constraint""
prob += 2000 * x + 1000 * y <= 300000, ""Cost_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",80000
"A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is 5000 and the profit per premium model is 8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define the decision variables
x1 = LpVariable('x1', lowBound=0, upBound=8, cat='Integer')  # Number of regular models
x2 = LpVariable('x2', lowBound=0, upBound=6, cat='Integer')  # Number of premium models

# Objective function: maximize profit
prob += 5000 * x1 + 8500 * x2, ""Total_Profit""

# Constraints
prob += x1 + x2 <= 12, ""Production_Capacity""
# Demand constraints are already included in the variable definitions

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",81000
"You are designing an office space with two types of desks: long desks and short desks. You can spend at most 2000. Long desks cost 300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?","from pulp import *

# Define the LP maximization problem
prob = LpProblem(""Maximize_Seating_Capacity"", LpMaximize)

# Define the decision variables
x1 = LpVariable('x1', lowBound=0, cat='Integer')  # Number of long desks
x2 = LpVariable('x2', lowBound=0, cat='Integer')  # Number of short desks

# Objective function: maximize seating capacity
prob += 6 * x1 + 2 * x2, ""Total_Seating_Capacity""

# Constraints
prob += 300 * x1 + 100 * x2 <= 2000, ""Budget_Constraint""
prob += 10 * x1 + 4 * x2 <= 200, ""Space_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",40
Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost 2 and 3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.,"#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Cost"", LpMinimize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Kilograms of fertilizer C
y = LpVariable('y', lowBound=0, cat='Continuous')  # Kilograms of fertilizer Y

# Objective function
prob += 2 * x + 3 * y, ""Total Cost""

# Constraints
prob += 1.5 * x + 5 * y >= 5, ""Nitrous oxide requirement""
prob += 3 * x + y >= 8, ""Vitamin mix requirement""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",5.85185186
"Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is 4 and the cost per pill for pill B is 5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Cost"", LpMinimize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of pill A
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of pill B

# Objective function
prob += 4 * x + 5 * y, ""Total Cost""

# Constraints
prob += 3 * x + 6 * y >= 40, ""Sleep-inducing medicine requirement""
prob += 5 * x + y >= 50, ""Anti-inflammatory medicine requirement""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",50
"A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is 10 and the profit per container of Oil Max Pro is 15. How many containers of each of oil should the car manufacturer make to maximize profit?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Profit"", LpMaximize)

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of containers of Oil Max
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of containers of Oil Max Pro

# Objective function
prob += 10 * x + 15 * y, ""Total Profit""

# Constraints
prob += 46 * x + 13 * y <= 1345, ""Substance A constraint""
prob += 43 * x + 4 * y <= 346, ""Substance B constraint""
prob += 56 * x + 45 * y <= 1643, ""Substance C constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",540
A food truck owner can spend at most 20000 on mangos and guavas. A mango costs the food truck owner 5 and a guava costs him 3. Spices are added and each mango is sold for a profit of 3 while each guava is sold for a profit of 4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?,"#
from pulp import *

# Create a LP Minimization problem
prob = LpProblem(""Maximize Profit"", LpMaximize)

# Variables
x = LpVariable('x', lowBound=100, upBound=150, cat='Integer')  # Number of mangos (100 <= x <= 150)
y = LpVariable('y', lowBound=0, upBound=50, cat='Integer')    # Number of guavas (y <= 1/3 * x)

# Objective function
prob += 3 * x + 4 * y, ""Maximize_Profit""

# Constraints
prob += 5 * x + 3 * y <= 20000, ""Cost_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",650
"A nutritionist is making a special vitamin mix using two drinks: A and B. The vitamin mix must contain at least 150 units of Vitamin A, at least 300 units of vitamin D, and at most 400 units of vitamin E. A cup of drink A contains 8 units of Vitamin A, 6 units of Vitamin D, 10 units of Vitamin E, and 4 units of Vitamin K. A cup of drink B contains 15 units of Vitamin A, 2 units of Vitamin D, 20 units of Vitamin E, and 12 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Minimize_Vitamin_K"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of cups of drink A
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of cups of drink B

# Objective function: minimize Vitamin K
prob += 4 * x + 12 * y, ""Total_Vitamin_K""

# Constraints
prob += 8 * x + 15 * y >= 150, ""Vitamin_A""
prob += 6 * x + 2 * y >= 300, ""Vitamin_D""
prob += 10 * x + 20 * y <= 400, ""Vitamin_E""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is 200 and the profit per gallon of vanilla ice cream is 300, how many gallons of each should be made to maximize profit?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=5, upBound=10, cat='Integer')  # Gallons of chocolate ice cream
y = LpVariable('y', lowBound=5, upBound=8, cat='Integer')   # Gallons of vanilla ice cream

# Objective function: maximize profit
prob += 200 * x + 300 * y, ""Total_Profit""

# Constraints
prob += x + 2 * y <= 30, ""Time_Constraint""
prob += x + 2 * y >= 6, ""Worker_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",4400
"Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is 500 and the profit per acre of cucumbers is 650, how many acres of each should he grow to maximize his profit? What is that profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=12, cat='Continuous')  # acres of potatoes
y = LpVariable('y', lowBound=15, upBound=50, cat='Continuous')  # acres of cucumbers

# Objective function
prob += 500*x + 650*y, ""Total_Profit""

# Constraints
prob += x + y <= 50, ""Land_Constraint""
prob += y <= 2*x, ""Resource_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",29999.99995
"A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000 square feet of vinyl can be produced weekly. If a square foot of hardwood flooring yields a profit of 2.5 and a square foot of vinyl planks produces a 3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=20000, upBound=50000, cat='Continuous')  # Square feet of hardwood flooring
y = LpVariable('y', lowBound=10000, upBound=30000, cat='Continuous')  # Square feet of vinyl planks

# Objective function: maximize profit
prob += 2.5 * x + 3 * y, ""Total_Profit""

# Constraints
prob += x + y >= 60000, ""Shipping_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",215000
"A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost 300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs 200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # days operating old farm
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # days operating new farm

# Objective function
prob += 300*x1 + 200*x2, ""Total_Cost""

# Constraints
prob += 2*x1 + 4*x2 >= 10, ""Raspberry_Constraint""
prob += 2*x1 + x2 >= 9, ""Blueberry_Constraint""
prob += 4*x1 + 2*x2 >= 15, ""Strawberry_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1366.666656
Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice. Assume that each serving of Rice costs 3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs 2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.,"from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Diet_Cost"", LpMinimize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # Servings of Rice per day
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # Servings of Kebab per day

# Objective function: minimize total cost
prob += 3 * x1 + 2 * x2, ""Total_Cost""

# Constraints
prob += 300 * x1 + 200 * x2 >= 2200, ""Calorie_Constraint""
prob += 4.5 * x1 + 4 * x2 >= 30, ""Protein_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",21.9999999
"A company sells custom scooters and bikes for customers. The profit per scooter is 200 and the profit per bike is 300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # Number of scooters
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # Number of bikes

# Objective function: maximize total profit
prob += 200 * x1 + 300 * x2, ""Total_Profit""

# Constraints
prob += 2 * x1 + 4 * x2 <= 5000, ""Design_Team_Constraint""
prob += 3 * x1 + 5 * x2 <= 6000, ""Engineering_Team_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",400000
"John has a 300 acre berry farm on which to plant blueberries and raspberries. John has 10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and 22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and 25 in watering costs is required. The profit per acre of blueberries is 56 and the profit per acre of raspberries is 75. Formulate an LP problem in order to maximize profit.","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # acres of blueberries
y = LpVariable('y', lowBound=0, cat='Continuous')  # acres of raspberries

# Objective function
prob += 56*x + 75*y, ""Total_Profit""

# Constraints
prob += x + y <= 300, ""Land_Constraint""
prob += 6*x + 3*y <= 575, ""Labor_Constraint""
prob += 22*x + 25*y <= 10000, ""Watering_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",14375.00025
"A man only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost 3 per serving and fruits cost 5 per serving, how many servings of each should he eat to minimize his cost?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # Servings of vegetables
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # Servings of fruits

# Objective function: minimize total cost
prob += 3 * x1 + 5 * x2, ""Total_Cost""

# Constraints
prob += 2 * x1 + 4 * x2 >= 20, ""Vitamin_Constraint""
prob += 3 * x1 + x2 >= 30, ""Mineral_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",30
"A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is 20 and 40 respectively for a batch of bagels and a batch of croissants.","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # batches of bagels
y = LpVariable('y', lowBound=0, cat='Integer')  # batches of croissants

# Objective function
prob += 20*x + 40*y, ""Total_Profit""

# Constraints
prob += 2*x + y <= 70, ""Oven_Time_Constraint""
prob += 0.25*x + 2*y <= 32, ""Pastry_Chef_Time_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1060
"A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs 300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs 600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # hours factory 1 operates
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # hours factory 2 operates

# Objective function
prob += 300*x1 + 600*x2, ""Total_Cost""

# Constraints
prob += 5*x1 + 10*x2 >= 20, ""Black_Bears_Constraint""
prob += 6*x1 + 10*x2 >= 5, ""White_Bears_Constraint""
prob += 3*x1 >= 15, ""Brown_Bears_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1500
"A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and 80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and 50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and 34000 available to spend on pesticide. If the revenue per acre of turnips is 300 and the revenue per acre of pumpkins is 450, how many acres of each should he grow to maximize his revenue.","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Revenue"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Acres of turnips
y = LpVariable('y', lowBound=0, cat='Continuous')  # Acres of pumpkins

# Objective function: maximize revenue
prob += 300 * x + 450 * y, ""Total_Revenue""

# Constraints
prob += x + y <= 500, ""Land_Availability""
prob += 50 * x + 90 * y <= 40000, ""Watering_Time""
prob += 80 * x + 50 * y <= 34000, ""Pesticide_Cost""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",206250
"A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid 300. Per shift, substitute teachers work 3 hours and get paid 100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of 40000, how many of each teacher should be hired to minimize the total number of teachers?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Teachers"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of staff teachers
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of substitute teachers

# Objective function: minimize the total number of teachers
prob += x + y, ""Total_Teachers""

# Constraints
prob += 6 * x + 3 * y >= 1000, ""Teaching_Hours""
prob += 300 * x + 100 * y <= 40000, ""Budget""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",268
"A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Drills"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of high intensity drills
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of low intensity drills

# Objective function: minimize the total number of drills
prob += x + y, ""Total_Drills""

# Constraints
prob += 50 * x + 30 * y >= 800, ""Gem_Processing""
prob += 50 * x + 20 * y <= 700, ""Water_Constraint""
prob += x <= 0.4 * (x + y), ""Limit_High_Intensity""
prob += y >= 10, ""Minimum_Low_Intensity""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",22
"A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Stores"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of dine-in places
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of food-trucks

# Objective function: minimize the total number of stores
prob += x + y, ""Total_Stores""

# Constraints
prob += 100 * x + 50 * y >= 500, ""Sandwich_Production""
prob += 8 * x + 3 * y <= 35, ""Employee_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",8
"There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Coins_Plated"", LpMaximize)

# Define decision variables
x_A = LpVariable('x_A', lowBound=0, cat='Integer')  # Number of times process A is run
x_B = LpVariable('x_B', lowBound=0, cat='Integer')  # Number of times process B is run

# Objective function: maximize the total number of coins plated
prob += 5 * x_A + 7 * x_B, ""Total_Coins_Plated""

# Constraints
prob += 3 * x_A + 5 * x_B <= 500, ""Gold_Constraint""
prob += 2 * x_A + 3 * x_B <= 300, ""Wire_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",750
"A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Saws"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of miter saws
y = LpVariable('y', lowBound=0, cat='Integer')  # number of circular saws

# Objective function
prob += x + y, ""Total_Saws""

# Constraints
prob += 50*x + 70*y >= 1500, ""Wood_Cutting_Constraint""
prob += 60*x + 100*y <= 2000, ""Sawdust_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",26
"A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Hay_Processed"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # acres processed using windrower
y = LpVariable('y', lowBound=0, cat='Continuous')  # acres processed using hay harvester

# Objective function
prob += 10*x + 8*y, ""Total_Hay_Processed""

# Constraints
prob += x + y <= 200, ""Land_Constraint""
prob += 2*x + y <= 300, ""Fuel_Constraint""
prob += 5*x + 3*y <= 800, ""Methane_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1800
"A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Production_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of wraps
y = LpVariable('y', lowBound=0, cat='Integer')  # number of platters

# Objective function
prob += 10*x + 8*y, ""Total_Production_Time""

# Constraints
prob += 5*x + 7*y >= 3000, ""Meat_Constraint""
prob += 3*x + 5*y >= 2500, ""Rice_Constraint""
prob += x >= 3*y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",6794
"An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Machines"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of cash-based machines
y = LpVariable('y', lowBound=0, cat='Integer')  # number of card-only machines

# Objective function
prob += x + y, ""Total_Machines""

# Constraints
prob += 20*x + 30*y >= 500, ""Processing_Capacity_Constraint""
prob += 4*x + 5*y <= 90, ""Paper_Usage_Constraint""
prob += y <= x, ""Machine_Type_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",20
"A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Jars_Filled"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of glass jars filled
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of plastic jars filled

# Objective function: maximize total number of jars filled
prob += x + y, ""Total_Jars_Filled""

# Constraints
prob += 250 * x + 300 * y <= 20000, ""Honey_Availability""
prob += y >= 2 * x, ""Plastic_Jar_Requirement""
prob += x >= 20, ""Minimum_Glass_Jar_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",70
"A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Tea_Usage"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of mango bubble teas made
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of lychee bubble teas made

# Objective function: minimize total amount of tea used
prob += 8 * x + 6 * y, ""Total_Tea_Used""

# Constraints
prob += 4 * x <= 2000, ""Mango_Juice_Constraint""
prob += 6 * y <= 3000, ""Lychee_Juice_Constraint""
prob += y >= 0.4 * (x + y), ""Proportion_Constraint""
prob += x >= y, ""Mango_Tea_Preference_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid 120. A permanent snow remover works 10 hours per shift and gets paid 250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of 6500, how many of each type of worker should be hired to minimize the total number of snow removers?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Snow_Removers"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of seasonal snow removers
y = LpVariable('y', lowBound=0, cat='Integer')  # number of permanent snow removers

# Objective function
prob += x + y, ""Total_Snow_Removers""

# Constraints
prob += 6*x + 10*y >= 300, ""Labor_Hours_Constraint""
prob += 120*x + 250*y <= 6500, ""Budget_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",44
"A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Furnaces"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=5, cat='Integer')  # Number of new model furnaces purchased
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of old model furnaces purchased

# Objective function: minimize total number of furnaces
prob += x + y, ""Total_Furnaces""

# Constraints
prob += 10 * x + 15 * y >= 200, ""Heating_Capacity_Constraint""
prob += 200 * x + 250 * y <= 3500, ""Electricity_Consumption_Constraint""
prob += y <= 0.35 * (x + y), ""Proportion_of_Furnaces_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?,"#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Factories"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of rural factories
y = LpVariable('y', lowBound=0, cat='Integer')  # number of urban factories

# Objective function
prob += x + y, ""Total_Factories""

# Constraints
prob += 100*x + 200*y >= 3000, ""Production_Constraint""
prob += 8*x + 20*y <= 260, ""Managerial_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",25
"An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Machines"", LpMinimize)

# Define decision variables
c = LpVariable('c', lowBound=0, cat='Integer')  # Number of counter-top sized machines
f = LpVariable('f', lowBound=0, cat='Integer')  # Number of fridge sized machines

# Objective function: minimize total number of machines
prob += c + f, ""Total_Machines""

# Constraints
prob += 80 * c + 150 * f >= 1000, ""Production_Capacity_Constraint""
prob += 50 * c + 70 * f <= 500, ""Heat_Output_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",7
"There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Paste"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of small containers
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of large containers

# Objective function: maximize amount of paste
prob += 20*x + 30*y, ""Total_Paste""

# Constraints
prob += 10*x + 20*y <= 500, ""Water_Constraint""
prob += 15*x + 20*y <= 700, ""Powdered_Pill_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",950
"An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Oil_Production"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # Acres for small oil wells
y = LpVariable('y', lowBound=0, cat='Continuous')  # Acres for large oil wells

# Objective function: maximize total production of oil
prob += 2*x + 5*y, ""Total_Oil_Production""

# Constraints
prob += 5*x + 10*y <= 2500, ""Drill_Bits_Constraint""
prob += 10*x + 20*y <= 4500, ""Pollution_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1125
"A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Production_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of almond croissants
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of pistachio croissants

# Objective function: minimize total production time
prob += 12*x + 10*y, ""Total_Production_Time""

# Constraints
prob += 5*x + 3*y <= 600, ""Butter_Constraint""
prob += 8*x + 6*y <= 800, ""Flour_Constraint""
prob += x >= 3*y, ""Almond_Popularity_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Grills"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of gas grills
y = LpVariable('y', lowBound=0, cat='Integer')  # number of electric grills

# Objective function
prob += x + y, ""Total_Grills""

# Constraints
prob += 20*x + 30*y >= 150, ""Production_Constraint""
prob += 20*x + 25*y <= 140, ""Oil_Constraint""
prob += y <= x, ""Grill_Type_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",6
"A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?","from pulp import *

# Create a LP maximization problem
prob = LpProblem(""Maximize_Number_of_Bottles"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=50, cat='Integer')  # Number of kids size bottles
y = LpVariable('y', lowBound=0, cat='Integer')   # Number of adult size bottles

# Objective function: maximize total number of bottles
prob += x + y, ""Total_Number_of_Bottles""

# Constraints
prob += 100*x + 300*y <= 25000, ""Cough_Syrup_Constraint""
prob += y >= 3*x, ""Adult_Size_Bottles_Constraint""
prob += x >= 50, ""Kids_Size_Bottles_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Fiber"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of brownies
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of lemon squares

# Objective function: minimize total amount of fiber
prob += 4*x + 6*y, ""Total_Fiber""

# Constraints
prob += 5*x <= 2500, ""Chocolate_Mix_Constraint""
prob += 7*y <= 3300, ""Lemon_Mix_Constraint""
prob += x >= 0.4*(x + y), ""Item_Percentage_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid 250 per shift while pharmacists are paid 300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of 9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Healthcare_Workers"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of nurses
y = LpVariable('y', lowBound=0, cat='Integer')  # number of pharmacists

# Objective function
prob += x + y, ""Total_Workers""

# Constraints
prob += 5*x + 7*y >= 200, ""Labor_Hours_Constraint""
prob += 250*x + 300*y <= 9000, ""Budget_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",29
"A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?","from pulp import *

# Create a LP minimization problem
prob = LpProblem(""Minimize_Washing_Machines"", LpMinimize)

# Define decision variables
T = LpVariable('T', lowBound=0, cat='Integer')  # Number of top-loading machines
F = LpVariable('F', lowBound=0, cat='Integer')  # Number of front-loading machines

# Objective function: minimize total number of machines
prob += T + F, ""Total_Machines""

# Constraints
prob += 50*T + 75*F >= 5000, ""Item_Washing_Constraint""
prob += 85*T + 100*F <= 7000, ""Energy_Constraint""
prob += T <= 0.4 * (T + F), ""Max_Toploading_Constraint""
prob += F >= 10, ""Min_Frontloading_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",67
A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?,"from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Branches"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of small branches
y = LpVariable('y', lowBound=0, cat='Integer')  # number of large branches

# Objective function
prob += x + y, ""Total_Branches""

# Constraints
prob += 10*x + 15*y <= 200, ""Bank_Tellers_Constraint""
prob += 50*x + 100*y >= 1200, ""Customer_Service_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",12
"A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Vans"", LpMinimize)

# Variables
x = LpVariable(""Regular Vans"", lowBound=0, cat='Integer')
y = LpVariable(""Hybrid Vans"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 500*x + 300*y >= 20000  # Delivery constraint
prob += 200*x + 100*y <= 7000  # Pollutants constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",60
"In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?¶","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize CO2 Production"", LpMaximize)

# Variables
x = LpVariable(""Process with Catalyst"", lowBound=0, cat='Integer')
y = LpVariable(""Process without Catalyst"", lowBound=0, cat='Integer')

# Objective function
prob += 15*x + 18*y

# Constraints
prob += 10*x + 15*y <= 300  # Wood constraint
prob += 20*x + 12*y <= 300  # Oxygen constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",369
"A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Tea Leaf Picking"", LpMaximize)

# Variables
x = LpVariable(""Acres for Traditional Machine"", lowBound=0, cat='Continuous')
y = LpVariable(""Acres for Modern Machine"", lowBound=0, cat='Continuous')

# Objective function
prob += 30*x + 40*y

# Constraints
prob += 20*x + 15*y <= 9000  # Fuel constraint
prob += 10*x + 15*y <= 6000  # Waste constraint
prob += x + y <= 500         # Land constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",17000
"A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Production Time"", LpMinimize)

# Variables
x = LpVariable(""Light sandwiches"", lowBound=0, cat='Integer')
y = LpVariable(""Heavy sandwiches"", lowBound=0, cat='Integer')

# Objective function
prob += 10*x + 15*y

# Constraints
prob += 2*x + 3*y <= 300   # Bread constraint
prob += 3*x + 5*y <= 500   # Cheese constraint
prob += y >= 3*x           # Heavy sandwich constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Stamping_Machines"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of dual model machines
y = LpVariable('y', lowBound=0, cat='Integer')  # number of single model machines

# Objective function
prob += x + y, ""Total_Machines""

# Constraints
prob += 50*x + 30*y >= 300, ""Letters_Stamping_Constraint""
prob += 20*x + 15*y <= 135, ""Glue_Usage_Constraint""
prob += y >= x + 1, ""Machine_Type_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",8
"A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least twice the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Crates"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=5, cat='Integer')  # number of small crates
y = LpVariable('y', lowBound=0, cat='Integer')  # number of large crates

# Objective function
prob += x + y, ""Total_Crates""

# Constraints
prob += 20*x + 50*y <= 500, ""Banana_Quantity_Constraint""
prob += y >= 2*x, ""Large_Crate_Requirement_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Crepe Mix"", LpMinimize)

# Variables
x = LpVariable(""Chocolate Crepes"", lowBound=1, cat='Integer')
y = LpVariable(""Peanut Butter Crepes"", lowBound=1, cat='Integer')

# Objective function
prob += 6*x + 7*y

# Constraints
prob += 3*x <= 400   # Chocolate spread constraint
prob += 4*y <= 450   # Peanut butter spread constraint
prob += x >= 0.25*(x + y)   # At least 25% of crepes should be chocolate
prob += y>=x

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",13
"A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns 300. An emergency fire fighter works 6 hours per shift and earns 100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of 7000, how many of each should the fire department hire to minimize the total number of fire fighters?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Fire Fighters"", LpMinimize)

# Variables
x = LpVariable(""Regular Fire Fighters"", lowBound=0, cat='Integer')
y = LpVariable(""Emergency Fire Fighters"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 10*x + 6*y >= 300   # Total hours constraint
prob += 300*x + 100*y <= 7000   # Budget constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",40
"A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Machines"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=3, cat='Integer')  # number of motion activated machines
y = LpVariable('y', lowBound=0, cat='Integer')  # number of manual machines

# Objective function
prob += x + y, ""Total_Machines""

# Constraints
prob += 50*x + 75*y >= 1000, ""Drop_Delivery_Constraint""
prob += 30*x + 20*y <= 500, ""Energy_Consumption_Constraint""
prob += y <= 0.4 * (x + y), ""Machine_Type_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",17
"A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Butcher Shops"", LpMinimize)

# Variables
x = LpVariable(""Small Shops"", lowBound=0, cat='Integer')
y = LpVariable(""Large Shops"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 30*x + 70*y >= 500   # Production constraint
prob += 2*x + 4*y <= 30      # Labor constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",8
"An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Vehicles"", LpMinimize)

# Variables
x = LpVariable(""Four Wheeler Vehicles"", lowBound=0, cat='Integer')
y = LpVariable(""Three Wheeler Vehicles"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 60*x + 40*y >= 1000   # Luggage movement constraint
prob += 30*x + 15*y <= 430   # Pollution constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",22
"A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Electricity Production"", LpMaximize)

# Variables
x = LpVariable(""Experiment Alpha"", lowBound=0, cat='Integer')
y = LpVariable(""Experiment Beta"", lowBound=0, cat='Integer')

# Objective function
prob += 8*x + 10*y

# Constraints
prob += 3*x + 5*y <= 800   # Metal constraint
prob += 5*x + 4*y <= 750   # Acid constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1680
"A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Fish_Caught"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # acres used for fishing with a net
y = LpVariable('y', lowBound=0, cat='Continuous')  # acres used for fishing with a fishing line

# Objective function
prob += 8*x + 5*y, ""Total_Fish_Caught""

# Constraints
prob += 4*x + 3*y <= 800, ""Bait_Constraint""
prob += 2*x + y <= 350, ""Pain_Tolerance_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1500
"A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Production Time"", LpMinimize)

# Variables
x = LpVariable(""Mochas"", lowBound=0, cat='Integer')
y = LpVariable(""Regular Coffees"", lowBound=0, cat='Integer')

# Objective function
prob += 5*x + 3*y

# Constraints
prob += 3*x + 6*y <= 400   # Coffee powder constraint
prob += 6*x + 2*y <= 500   # Milk constraint
prob += x >= 3*y           # Mocha popularity constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 35 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Slicers"", LpMinimize)

# Variables
x = LpVariable(""Manual Slicers"", lowBound=0, cat='Integer')
y = LpVariable(""Automatic Slicers"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 5*x + 8*y >= 50   # Slicing capacity constraint
prob += 3*x + 6*y <= 35   # Grease constraint
prob += x <= y            # Slicer preference constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Bottles"", LpMaximize)

# Variables
x = LpVariable(""Glass Bottles"", lowBound=20, cat='Integer')
y = LpVariable(""Plastic Bottles"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 500*x + 750*y <= 250000   # Water availability constraint
prob += y >= 3*x                 # Plastic preference constraint
# No need to add x >= 20, as it's already included in the variable definition x >= 20

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",363
"An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Curry Base"", LpMinimize)

# Variables
x = LpVariable(""Goat Curry Bowls"", lowBound=0, cat='Integer')
y = LpVariable(""Chicken Curry Bowls"", lowBound=0, cat='Integer')

# Objective function
prob += 6*x + 5*y

# Constraints
prob += 3*x <= 1500             # Goat meat constraint
prob += 5*y <= 2000             # Chicken meat constraint
prob += 3*x >= y                # Chicken curry proportion constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid 300 per shift while part time workers are paid 100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of 15000, how many of each type of worker should be scheduled to minimize the total number of workers.","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Workers"", LpMinimize)

# Variables
x = LpVariable(""Full-time Workers"", lowBound=0, cat='Integer')
y = LpVariable(""Part-time Workers"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 8*x + 4*y >= 500        # Labor hour constraint
prob += 300*x + 100*y <= 15000  # Budget constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",100
"A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Machines"", LpMinimize)

# Variables
x = LpVariable(""Machines_A"", lowBound=5, cat='Integer')
y = LpVariable(""Machines_B"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 30*x + 50*y >= 1000        # Production constraint
prob += 100*x + 120*y <= 3000     # Electricity constraint
prob += y <= 0.3 * (x + y)        # Machine type constraint for B
prob += x >= 5                    # Machine type constraint for A

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",28
"A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Factories"", LpMinimize)

# Variables
x = LpVariable(""Medium_Factories"", lowBound=0, cat='Integer')
y = LpVariable(""Small_Factories"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 50*x + 35*y >= 250     # Production constraint
prob += 3*x + 2*y <= 16        # Operator constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",5
"A chemical plant can buy two types of generators, generator A and generator B, which use two different processes to generate hydrogen. Generator A uses an electrolysis process and produces 40 cubic meters of hydrogen as well as 300 units of pollutants every day. Generator B uses a fermentation process to produce 30 cubic meters of hydrogen per day while outputting 200 units of pollutants. The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day but due to environmental restrictions they can produce at most 3000 units of pollutant. How many of each type of generator should they buy to minimize the number of generators needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Generators"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of generator A
y = LpVariable('y', lowBound=0, cat='Integer')  # number of generator B

# Objective function
prob += x + y, ""Total_Generators""

# Constraints
prob += 40*x + 30*y >= 1000, ""Hydrogen_Production_Constraint""
prob += 300*x + 200*y <= 3000, ""Pollutant_Limitation_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Rare Compound"", LpMaximize)

# Variables
x = LpVariable(""Reaction_A"", lowBound=0, cat='Integer')
y = LpVariable(""Reaction_B"", lowBound=0, cat='Integer')

# Objective function
prob += 10*x + 8*y

# Constraints
prob += 5*x + 7*y <= 1000    # Rare inert gas constraint
prob += 6*x + 3*y <= 800    # Treated water constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1552
"A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Rare Earth Oxide Production"", LpMaximize)

# Variables
x = LpVariable(""Heap_Leaching"", lowBound=0, cat='Continuous')
y = LpVariable(""Vat_Leaching"", lowBound=0, cat='Continuous')

# Objective function
prob += 3*x + 5*y

# Constraints
prob += x + y <= 100      # Land availability constraint
prob += 10*x + 20*y <= 100   # Machine constraint
prob += 8*x + 17*y <= 90    # Wastewater constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",30
"A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars. If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Production Time"", LpMinimize)

# Variables
x = LpVariable(""Milk_Chocolate"", lowBound=0, cat='Continuous')
y = LpVariable(""Dark_Chocolate"", lowBound=0, cat='Continuous')

# Objective function
prob += 15*x + 12*y

# Constraints
prob += 4*x + 6*y <= 2000   # Cocoa constraint
prob += 7*x + 3*y <= 1750   # Milk constraint
prob += x >= 2*y            # Demand constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute. Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Number of Printers"", LpMinimize)

# Variables
x = LpVariable(""Premium_Printers"", lowBound=0, cat='Integer')
y = LpVariable(""Regular_Printers"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 3*x + 2*y >= 20   # Printing speed constraint
prob += 4*x + 3*y <= 35   # Ink constraint
prob += lpSum([y]) <= lpSum([x])   # Premium model preference: y < x

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",7
"A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Number of Bottles"", LpMaximize)

# Variables
x = LpVariable(""Vintage_Bottles"", lowBound=0, cat='Integer')
y = LpVariable(""Regular_Bottles"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 500*x + 750*y <= 100000    # Vine availability constraint
prob += y >= 4*x                  # Ratio constraint
prob += x >= 10                   # Minimum vintage bottles constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",142
"A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Special_Syrup"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=1, cat='Integer')  # number of peach flavored candy packs
y = LpVariable('y', lowBound=1, cat='Integer')  # number of cherry flavored candy packs

# Objective function
prob += 5*x + 4*y, ""Total_Special_Syrup""

# Constraints
prob += 3*x <= 3000, ""Peach_Flavoring_Constraint""
prob += 5*y <= 4000, ""Cherry_Flavoring_Constraint""
prob += x >= y, ""Pack_Ratio_Constraint""
prob += y >= 0.3 * (x + y), ""Minimum_Cherry_Flavor_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",9
"A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Discharge"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of pills of Pill 1
y = LpVariable('y', lowBound=0, cat='Integer')  # number of pills of Pill 2

# Objective function
prob += 0.3*x + 0.1*y, ""Total_Discharge""

# Constraints
prob += 0.2*x + 0.6*y <= 6, ""Pain_Medication_Constraint""
prob += 0.3*x + 0.2*y >= 3, ""Anxiety_Medication_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2.3
"A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Sugar Intake"", LpMinimize)

# Variables
x = LpVariable(""Bottles_of_Alpha"", lowBound=0, cat='Integer')
y = LpVariable(""Bottles_of_Omega"", lowBound=0, cat='Integer')

# Objective function
prob += 20*x + 15*y

# Constraints
prob += 30*x + 20*y >= 100         # Protein constraint
prob += 350*x + 300*y >= 2000      # Calorie constraint
prob += y <= 0.35*(x + y)          # Proportion constraint for omega brand
prob += x >= 0                     # Non-negativity constraint
prob += y >= 0                     # Non-negativity constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",110
"A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime. However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Slime Production"", LpMaximize)

# Variables
x = LpVariable(""Beaker_1"", lowBound=0, cat='Integer')
y = LpVariable(""Beaker_2"", lowBound=0, cat='Integer')

# Objective function
prob += 5*x + 3*y

# Constraints
prob += 4*x + 6*y <= 150   # Flour constraint
prob += 6*x + 3*y <= 100   # Special liquid constraint
prob += 4*x + 2*y <= 30    # Waste constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",45
"An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Meat Usage"", LpMinimize)

# Variables
x = LpVariable(""Small_Bones"", lowBound=0, cat='Integer')
y = LpVariable(""Large_Bones"", lowBound=0, cat='Integer')

# Objective function
prob += 12*x + 15*y

# Constraints
prob += 10*x + 15*y <= 2000   # Tooth medication constraint
prob += x >= 0.5*(x + y)     # Small bone requirement
prob += y >= 30              # Large bone minimum

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",810
"A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Vitamin D Intake"", LpMaximize)

# Variables
x = LpVariable(""Orange_Juice_Boxes"", lowBound=3, cat='Integer')  # At least 3 orange juice boxes
y = LpVariable(""Apple_Juice_Boxes"", lowBound=0, cat='Integer')

# Objective function
prob += 10*x + 12*y

# Constraints
prob += 8*x + 6*y <= 300   # Vitamin C constraint
prob += y >= 3*x           # Apple juice preference
prob += x >= 3             # At least 3 orange juice boxes

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",582
"A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Cleaning Time"", LpMinimize)

# Variables
x = LpVariable(""Cleansing_Chemical_Units"", lowBound=100, cat='Integer')  # At least 100 units of cleansing chemical
y = LpVariable(""Odor_Removing_Chemical_Units"", lowBound=0, cat='Integer')

# Objective function
prob += 4*x + 6*y

# Constraints
prob += x + y >= 300   # Total units of chemicals constraint
prob += x <= 2*y       # Ratio constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1400
"A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour. Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Total Time"", LpMinimize)

# Variables
x1 = LpVariable(""Hours_Factory1"", lowBound=0, cat='Continuous')
x2 = LpVariable(""Hours_Factory2"", lowBound=0, cat='Continuous')

# Objective function
prob += x1 + x2

# Constraints
prob += 20*x1 + 10*x2 >= 700   # Allergy pills constraint
prob += 15*x1 + 30*x2 >= 600   # Fever reducing pills constraint
prob += 20*x1 + 30*x2 <= 1000  # Rare compound constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",36.6666663
"A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Fat_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of fish meals
y = LpVariable('y', lowBound=0, cat='Integer')  # number of chicken meals

# Objective function
prob += 7*x + 10*y, ""Total_Fat_Intake""

# Constraints
prob += 10*x + 15*y >= 130, ""Protein_Constraint""
prob += 12*x + 8*y >= 120, ""Iron_Constraint""
prob += y >= 2*x, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",118
"A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_People_Treated"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=10, cat='Integer')  # number of regular batches
y = LpVariable('y', lowBound=0, cat='Integer')   # number of premium batches

# Objective function
prob += 50*x + 30*y, ""Total_People_Treated""

# Constraints
prob += 50*x + 40*y <= 3000, ""Medicinal_Ingredients_Constraint""
prob += 40*x + 60*y <= 3500, ""Rehydration_Product_Constraint""
prob += y-1 >= x, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2650
"A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Patients_Blood_Pressure"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=20, cat='Integer')  # number of patients using automatic machine
y = LpVariable('y', lowBound=0, cat='Integer')   # number of patients using manual machine

# Objective function
prob += x + y, ""Total_Patients""

# Constraints
prob += 10*x + 15*y <= 20000, ""Time_Constraint""
prob += y >= 2*x, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1500
"A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Sugar_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # servings of syrup 1
y = LpVariable('y', lowBound=0, cat='Integer')  # servings of syrup 2

# Objective function
prob += 0.5*x + 0.3*y, ""Total_Sugar_Intake""

# Constraints
prob += 0.5*x + 0.2*y <= 5, ""Throat_Medicine_Constraint""
prob += 0.4*x + 0.5*y >= 4, ""Lung_Medicine_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2.4
"A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Unsaturated Fat Intake"", LpMinimize)

# Variables
x = LpVariable(""Crab_Cakes"", lowBound=0, cat='Integer')
y = LpVariable(""Lobster_Rolls"", lowBound=0, cat='Integer')

# Objective function
prob += 4*x + 6*y

# Constraints
prob += 5*x + 8*y >= 80  # Vitamin A constraint
prob += 7*x + 4*y >= 100  # Vitamin C constraint
prob += y <= 0.4*(x + y)  # Lobster roll constraint (at most 40% of meals)

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",64
"A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Minty Foam Production"", LpMaximize)

# Variables
x = LpVariable(""Demonstration_1"", lowBound=0, cat='Integer')
y = LpVariable(""Demonstration_2"", lowBound=0, cat='Integer')

# Objective function
prob += 25*x + 18*y

# Constraints
prob += 10*x + 12*y <= 120  # Mint constraint
prob += 20*x + 15*y <= 100  # Active ingredient constraint
prob += 5*x + 3*y <= 50    # Black tar constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",125
"A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Fever_Suppressant"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=50, cat='Integer')  # number of children's vaccines
y = LpVariable('y', lowBound=0, cat='Integer')   # number of adult vaccines

# Objective function
prob += 50*x + 75*y, ""Total_Fever_Suppressant""

# Constraints
prob += 50*x + 75*y <= 20000, ""mRNA_Constraint""
prob += y >= 0.7*(x + y), ""Adult_Vaccine_Requirement""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",11275
"A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Fat_Intake"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # servings of apple flavored baby food
y = LpVariable('y', lowBound=0, cat='Integer')  # servings of carrot flavored baby food

# Objective function
prob += 2*x + 4*y, ""Total_Fat_Intake""

# Constraints
prob += 5*x + 3*y <= 100, ""Folate_Constraint""
prob += x >= 3*y, ""Ratio_Constraint""
prob += y >= 2, ""Minimum_Carrot_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",54
"Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Time for Lawn"", LpMinimize)

# Variables
x = LpVariable(""Fertilizer_units"", lowBound=0, cat='Integer')
y = LpVariable(""Seeds_units"", lowBound=0, cat='Integer')

# Objective function
prob += 0.5*x + 1.5*y

# Constraints
prob += x + y <= 300        # Total units constraint
prob += x >= 50             # Minimum fertilizer constraint
prob += x <= 2*y            # Ratio constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",62.5
"A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Total_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # hours factory 1 is run
y = LpVariable('y', lowBound=0, cat='Continuous')  # hours factory 2 is run

# Objective function
prob += x + y, ""Total_Time""

# Constraints
prob += 30*x + 45*y <= 5000, ""Base_Gel_Constraint""
prob += 12*x + 20*y >= 800, ""Acne_Cream_Requirement""
prob += 15*x + 10*y >= 1000, ""Anti_Bacterial_Cream_Requirement""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",66.666667
"A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Cholesterol Intake"", LpMinimize)

# Variables
x = LpVariable(""Burgers"", lowBound=0, cat='Integer')
y = LpVariable(""Pizza_slices"", lowBound=0, cat='Integer')

# Objective function
prob += 12*x + 10*y

# Constraints
prob += 10*x + 8*y >= 130         # Fat intake constraint
prob += 300*x + 250*y >= 3000     # Caloric intake constraint
prob += y >= 2*x                  # Pizza-to-burger ratio constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",160
"A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize People Supplied"", LpMaximize)

# Variables
x = LpVariable(""Batches_shots"", lowBound=0, upBound=10, cat='Integer')
y = LpVariable(""Batches_pills"", lowBound=0, cat='Integer')

# Objective function
prob += 10*x + 7*y

# Constraints
prob += 30*x + 50*y <= 1200    # Vitamin C constraint
prob += 40*x + 30*y <= 1500    # Vitamin D constraint
prob += x <= 10               # Production limit for shots
prob += y >= x                # Pills more popular constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",226
"A doctor's office takes the temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Temperature_Taken"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # patients checked with electronic thermometer
y = LpVariable('y', lowBound=0, cat='Integer')  # patients checked with regular thermometer

# Objective function
prob += x + y, ""Total_Patients_Checked""

# Constraints
prob += 3*x + 2*y <= 15000, ""Time_Constraint""
prob += y >= 50, ""Minimum_Regular_Thermometer_Use""
prob += x >= 2*y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",5625
"A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Waste Production"", LpMinimize)

# Variables
x = LpVariable(""Machine1_minutes"", lowBound=0)
y = LpVariable(""Machine2_minutes"", lowBound=0)

# Objective function
prob += 0.3*x + 0.5*y

# Constraints
prob += 0.5*x + 0.3*y <= 8      # Medicine delivered to the heart constraint
prob += 0.8*x + 1*y >= 4        # Medicine delivered to the brain constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1.5
"A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Sodium_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # packs of ramen
y = LpVariable('y', lowBound=0, cat='Integer')  # packs of fries

# Objective function
prob += 100*x + 75*y, ""Total_Sodium_Intake""

# Constraints
prob += 400*x + 300*y >= 3000, ""Calories_Constraint""
prob += 20*x + 10*y >= 80, ""Protein_Constraint""
prob += x <= 0.3*(x + y), ""Meal_Preference""
 
# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",750
"A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Foam Production"", LpMaximize)

# Variables
x = LpVariable(""Cheap_boxes"", lowBound=0, cat='Integer')
y = LpVariable(""Expensive_boxes"", lowBound=0, cat='Integer')

# Objective function
prob += 8*x + 10*y

# Constraints
prob += 3*x + 5*y <= 200    # Metal constraint
prob += 5*x + 8*y <= 300    # Acid constraint
prob += 2*x + 3*y <= 50     # Heat constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",200
"A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Digestive Medicine"", LpMinimize)

# Variables
x = LpVariable(""Painkiller_pills"", lowBound=50, cat='Integer')
y = LpVariable(""Sleeping_pills"", lowBound=0, cat='Integer')

# Objective function
prob += 3*x + 5*y

# Constraints
prob += 10*x + 6*y <= 3000      # Morphine constraint
prob += y >= 0.7 * (x + y)     # At least 70% should be sleeping pills

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",735
"A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Zinc_Intake"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of gummies
y = LpVariable('y', lowBound=0, cat='Integer')  # number of pills

# Objective function
prob += 4*x + 5*y, ""Total_Zinc_Intake""

# Constraints
prob += 3*x + 2*y <= 200, ""Magnesium_Constraint""
prob += y >= 10, ""Pill_Requirement""
prob += x >= 3*y, ""Gummy_Preference""
 
# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",306
"A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?","from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize Medication Time"", LpMinimize)

# Variables
x = LpVariable(""Anxiety_Medication"", lowBound=0, cat='Integer')
y = LpVariable(""Anti_Depressants"", lowBound=0, cat='Integer')

# Objective function
prob += 3*x + 5*y

# Constraints
prob += x + y >= 100       # Total medication constraint
prob += x >= 30            # Minimum anxiety medication constraint
prob += x <= 2*y           # Ratio constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",368
"A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Total_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # hours of machine 1
y = LpVariable('y', lowBound=0, cat='Continuous')  # hours of machine 2

# Objective function
prob += x + y, ""Total_Time""

# Constraints
prob += 30*x + 45*y >= 1300, ""Eye_Cream_Production""
prob += 60*x + 30*y >= 1500, ""Foot_Cream_Production""
prob += 20*x + 15*y <= 1200, ""Distilled_Water_Constraint""
 
# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",34.166666
"A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Fat_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # servings of almonds
y = LpVariable('y', lowBound=0, cat='Integer')  # servings of cashews

# Objective function
prob += 15*x + 12*y, ""Total_Fat_Intake""

# Constraints
prob += 200*x + 300*y >= 10000, ""Calorie_Requirement""
prob += 20*x + 25*y >= 800, ""Protein_Requirement""
prob += x >= 2*y, ""Almonds_Cashews_Ratio""
 
# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",603
"A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Hands_Cleaned"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=30, cat='Integer')  # number of liquid hand sanitizers
y = LpVariable('y', lowBound=0, cat='Integer')  # number of foam hand sanitizers

# Objective function
prob += 30*x + 20*y, ""Total_Hands_Cleaned""

# Constraints
prob += 40*x + 60*y <= 2000, ""Water_Constraint""
prob += 50*x + 40*y <= 2100, ""Alcohol_Constraint""
prob += y-1 >= x, ""Foam_More_Than_Liquid""
 
# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",970
"A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Patients Seen"", LpMaximize)

# Variables
x = LpVariable(""Throat_Swabs"", lowBound=0, cat='Integer')
y = LpVariable(""Nasal_Swabs"", lowBound=0, cat='Integer')

# Objective function
prob += x + y

# Constraints
prob += 5*x + 3*y <= 20000      # Time constraint
prob += y >= 30                # Minimum nasal swabs
prob += x >= 4*y               # Throat-to-nasal swabs ratio constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",4347
"A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize Medicine to Back"", LpMaximize)

# Variables
x = LpVariable(""Doses_PainKiller1"", lowBound=0, cat='Integer')
y = LpVariable(""Doses_PainKiller2"", lowBound=0, cat='Integer')

# Objective function
prob += 0.8*x + 0.4*y

# Constraints
prob += 0.5*x + 0.7*y >= 4      # Medicine to the legs constraint
prob += 0.3*x + 0.6*y <= 8      # Sleeping medicine constraint

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",20.8
"A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar. The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Sugar_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of bananas
y = LpVariable('y', lowBound=0, cat='Integer')  # number of mangoes

# Objective function
prob += 10*x + 8*y, ""Total_Sugar_Intake""

# Constraints
prob += 80*x + 100*y >= 4000, ""Calories_Constraint""
prob += 20*x + 15*y >= 150, ""Potassium_Constraint""
prob += 2*y <= x, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",440
"In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue. If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Slime_Production"", LpMaximize)

# Variables
x = LpVariable(""Table1_Setups"", lowBound=0, cat='Continuous')
y = LpVariable(""Table2_Setups"", lowBound=0, cat='Continuous')

# Objective function
prob += 4*x + 5*y, ""Total Slime""

# Constraints
prob += 3*x + 8*y <= 100, ""Powder""
prob += 5*x + 6*y <= 90, ""Glue""
prob += 2*x + 4*y <= 30, ""Mess""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",60
"A pharmaceutical company has 800 units of painkiller medicine and makes daytime and nighttime painkiller. A daytime pill has 6 units of painkiller medicine and 2 units of sleep medicine. A nighttime pill has 5 units of painkiller medicine and 5 units of sleep medicine. Since some people don’t want the sleeping effect, at least 40% of the pills must be daytime pills. However at least 200 nighttime pills must be made. How many of each pill should be made to minimize the total amount of sleep medicine required?","from pulp import *

# Create the problem
prob = LpProblem(""Minimize_Sleep_Medicine"", LpMinimize)

# Variables
x = LpVariable(""Daytime_Pills"", lowBound=0, cat='Continuous')
y = LpVariable(""Nighttime_Pills"", lowBound=0, cat='Continuous')

# Objective function
prob += 2*x + 5*y, ""Total_Sleep_Medicine""

# Constraints
prob += 6*x + 5*y <= 800, ""Painkiller_Medicine""
prob += x >= 0.4*(x + y), ""Daytime_Pills_Constraint""
prob += y >= 200, ""Minimum_Nighttime_Pills""
prob += x >= 0, ""Non-Negativity_X""
prob += y >= 0, ""Non-Negativity_Y""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?","from pulp import *

# Create the problem
prob = LpProblem(""Maximize_Sugar_Intake"", LpMaximize)

# Variables
x = LpVariable(""Cheesecake_Slices"", lowBound=0, cat='Continuous')
y = LpVariable(""Caramel_Cake_Slices"", lowBound=0, cat='Continuous')

# Objective function
prob += 40 * x + 50 * y, ""Total_Sugar""

# Constraints
prob += 200 * x + 250 * y <= 10000, ""Calorie_Limit""
prob += x >= 3 * y, ""Cheesecake_Preference""
prob += y >= 3, ""Minimum_Caramel_Cake_Slices""
prob += x >= 0, ""Non-Negativity_X""
prob += y >= 0, ""Non-Negativity_Y""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",2000.00002
"Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=100, cat='Continuous')  # units of sulfate
y = LpVariable('y', lowBound=0, cat='Continuous')    # units of ginger

# Objective function
prob += 0.5*x + 0.75*y, ""Total_Time""

# Constraints
prob += x + y <= 400, ""Total_Ingredient_Constraint""
prob += x <= 2*y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",87.5
"A pharmaceutical company has two labs, lab 1 and lab 2, where they make heart and lung medication in pill form. At lab 1, they can produce 20 heart medication pills and 30 lung medication pills per hour. At lab 2, they can produce 30 heart medication pills and 40 lung medication pills per hour. Each session at lab 1 requires 3 hours of worker labor while each session at lab 2 requires 5 hours of worker labor. The company has 1500 worker hours available and must make at least 20000 heart medication pills and at least 30000 lung medication pills. How many hours at each lab should be run to minimize the total time needed?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # hours lab 1 is run
y = LpVariable('y', lowBound=0, cat='Continuous')  # hours lab 2 is run

# Objective function
prob += 3*x + 5*y, ""Total_Time""

# Constraints
prob += 3*x + 5*y <= 1500, ""Worker_Hours_Constraint""
prob += 20*x + 30*y >= 20000, ""Heart_Medication_Constraint""
prob += 30*x + 40*y >= 30000, ""Lung_Medication_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Sugar_Intake"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of oranges eaten
y = LpVariable('y', lowBound=0, cat='Integer')  # number of grapefruits eaten

# Objective function
prob += 5*x + 6*y, ""Total_Sugar_Intake""

# Constraints
prob += 5*x + 7*y >= 80, ""Vitamin_C_Constraint""
prob += 3*x + 5*y >= 70, ""Vitamin_A_Constraint""
prob += x >= 2*y, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",105
"A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_People_Treated"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=5, cat='Integer')  # number of doses of medicine A
y = LpVariable('y', lowBound=0, cat='Integer')  # number of doses of medicine B

# Objective function
prob += 12*x + 8*y, ""Total_People_Treated""

# Constraints
prob += 30*x + 40*y <= 300, ""Imported_Material_Constraint""
prob += 50*x + 30*y <= 400, ""mRNA_Constraint""
prob += y-1 >= x, ""Medicine_B_Greater_than_A""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",76
"A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as swabs. However, at least 20 swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Tests_Administered"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of spit tests
y = LpVariable('y', lowBound=20, cat='Integer')  # number of swab tests (min 20)

# Objective function
prob += x + y, ""Total_Tests_Administered""

# Constraints
prob += 10*x + 15*y <= 8000, ""Time_Constraint""
prob += x >= 2*y, ""Accuracy_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",790
"A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin. In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor. How many minutes of each beam should be used to minimize the total radiation received by the pancreas?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePancreasRadiation"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Continuous')  # minutes of Beam 1
y = pulp.LpVariable('y', lowBound=0, cat='Continuous')  # minutes of Beam 2

# Objective function: minimize 0.3x + 0.2y (radiation to pancreas)
prob += 0.3 * x + 0.2 * y, ""TotalPancreasRadiation""

# Constraints
prob += 0.2 * x + 0.1 * y <= 4  # radiation to skin <= 4 units
prob += 0.6 * x + 0.4 * y >= 3  # radiation to tumor >= 3 units

# Solve the problem
prob.solve()


if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1.5
"A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeFatIntake"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of turkey dinners
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of tuna salad sandwiches

# Objective function: minimize 12x + 8y (fat intake)
prob += 12 * x + 8 * y, ""TotalFatIntake""

# Constraints
prob += 20 * x + 18 * y >= 150  # protein constraint
prob += 30 * x + 25 * y >= 200  # carb constraint
prob += 3 * x - 2 * y <= 0      # cost constraint (at most 40% turkey dinner)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",72
"A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas. The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeGreenGas"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # experiments of type 1
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # experiments of type 2

# Objective function: maximize 5x + 6y (total green gas)
prob += 5 * x + 6 * y, ""TotalGreenGas""

# Constraints
prob += 3 * x + 5 * y <= 80  # red liquid constraint
prob += 4 * x + 3 * y <= 70  # blue liquid constraint
prob += x + 2 * y <= 10     # smelly gas constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",50
"A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Filler_Material"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=100, cat='Integer')  # number of large pills (min 100)
y = LpVariable('y', lowBound=0, cat='Integer')  # number of small pills

# Objective function
prob += 2 * x + y, ""Total_Filler_Material""

# Constraints
prob += 3 * x + 2 * y <= 1000, ""Medicinal_Ingredients_Constraint""
prob += y >= 1.5 * x, ""Popularity_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f"" {value(prob.objective)}"")",350
"Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 200 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Total_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=200, cat='Integer')  # number of units of chlorine (min 200)
y = LpVariable('y', lowBound=0, cat='Integer')  # number of units of water softener

# Objective function
prob += x + 2 * y, ""Total_Time""

# Constraints
prob += x <= 0.5 * y, ""Chlorine_Limit_Constraint""
prob += x + y == 500, ""Total_Chemical_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Total_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # number of hours for process 1
y = LpVariable('y', lowBound=0, cat='Continuous')  # number of hours for process 2

# Objective function
prob += x + y, ""Total_Time""

# Constraints
prob += 35 * x + 50 * y >= 1200, ""Pain_Killers_Constraint""
prob += 12 * x + 30 * y >= 1200, ""Sleeping_Pills_Constraint""
prob += 50 * x + 60 * y <= 2000, ""Preliminary_Material_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeSugarIntake"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # packs of blueberries
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # packs of strawberries

# Objective function: minimize 5x + 7y (total sugar intake)
prob += 5 * x + 7 * y, ""TotalSugarIntake""

# Constraints
prob += 3 * x + y >= 90   # anti-oxidants requirement
prob += 5 * x + 7 * y >= 100   # minerals requirement
prob += y >= 3 * x       # relationship between packs of strawberries and blueberries

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",390
"An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Total_Mass_Supported"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of beam bridges
y = LpVariable('y', lowBound=0, cat='Integer')  # number of truss bridges

# Objective function
prob += 40 * x + 60 * y, ""Total_Mass_Supported""

# Constraints
prob += 30 * x + 50 * y <= 600, ""Popsicle_Sticks_Constraint""
prob += 5 * x + 8 * y <= 100, ""Glue_Constraint""
prob += y <= 5, ""Truss_Bridges_Constraint""
prob += x >= y + 1, ""Beam_Bridges_Constraint""  # x > y translated to x >= y + 1 for integer variables

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",800
"A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeVaccinations"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of pill vaccines
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of shot vaccines

# Objective function: maximize x + y (total patients vaccinated)
prob += x + y, ""TotalPatientsVaccinated""

# Constraints
prob += 10 * x + 20 * y <= 10000   # Time constraint
prob += y >= 3 * x                 # Shot constraint
prob += x >= 30                    # Minimum pill vaccines

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",571
"A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is 30 while the cost per truck trip is 50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of 1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTrips"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # trips by vans
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # trips by trucks

# Objective function: minimize x + y (total number of trips)
prob += x + y, ""TotalTrips""

# Constraints
prob += 50 * x + 80 * y >= 1500   # Transport requirement
prob += 30 * x + 50 * y <= 1000   # Budget constraint
prob += x >= y + 1                # Relationship between trips by vans and trucks

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",24
"A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeHoneyTransport"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small bottles
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large bottles

# Objective function: maximize 5x + 20y (total honey transported)
prob += 5 * x + 20 * y, ""TotalHoneyTransported""

# Constraints
prob += x <= 300                # Small bottles constraint
prob += y <= 100                # Large bottles constraint
prob += x >= 2 * y              # Ratio constraint
prob += x + y <= 200            # Total bottles constraint
prob += y >= 50                 # Minimum large bottles

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1990
"An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeFuelConsumption"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of ship trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of plane trips

# Objective function: minimize 500x + 300y (total fuel consumed)
prob += 500 * x + 300 * y, ""TotalFuelConsumed""

# Constraints
prob += 40 * x + 20 * y >= 500   # Container requirement
prob += y <= 10                  # Maximum plane trips
prob += x >= 0.5 * (x + y)       # Minimum ship trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",6300
"There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?¶","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTransportTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of boat trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of canoe trips

# Objective function: minimize 20x + 40y (total time)
prob += 20 * x + 40 * y, ""TotalTime""

# Constraints
prob += 10 * x + 8 * y >= 300     # Duck requirement
prob += x <= 12                   # Maximum boat trips
prob += y >= 0.6 * (x + y)        # Minimum canoe trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1160
"A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePollution"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of old vans
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of new vans

# Objective function: minimize 50x + 30y (total pollution)
prob += 50 * x + 30 * y, ""TotalPollution""

# Constraints
prob += 100 * x + 80 * y >= 5000   # Bottle requirement
prob += y <= 30                   # Maximum new vans

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",2200
"A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeLawnMowing"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small teams
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large teams

# Objective function: maximize 50x + 80y (total lawn mowed)
prob += 50 * x + 80 * y, ""TotalLawnMowed""

# Constraints
prob += 3 * x + 5 * y <= 150   # Employee availability
prob += x >= 10                # Minimum small teams
prob += y >= 6                 # Minimum large teams
prob += x >= 3 * y             # Ratio constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",2480
"An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeTricksPerformed"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of otters
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of dolphins

# Objective function: maximize 3x + y (total tricks performed)
prob += 3 * x + y, ""TotalTricksPerformed""

# Constraints
prob += 3 * x + 5 * y <= 200   # Treat availability
prob += y >= 10                # Minimum dolphins
prob += x <= 0.3 * (x + y)     # Maximum otters

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",71
"A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used. Find the minimum number of vans that can be used?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeVans"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of vans
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of trucks

# Objective function: minimize x (number of vans)
prob += x, ""MinimizeVans""

# Constraints
prob += 50 * x + 100 * y >= 2000   # Shoe supply requirement
prob += y <= x                    # Truck limit

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",14
"An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.","#runtime error
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Containers_and_Trucks"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=15, cat='Integer')  # number of containers (x >= 15)
y = LpVariable('y', lowBound=0, cat='Integer')   # number of trucks

# Objective function
prob += x + y, ""Total_Number_of_Containers_and_Trucks""

# Constraints
prob += 30 * x + 40 * y >= 2000, ""Oil_Transportation_Constraint""
prob += y <= 0.5 * x, ""Government_Restriction_on_Trucks""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",60
"A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students. The school needs to provide transportation for at least 500 students. In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeBuses"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small buses
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large buses

# Objective function: minimize x + y (total buses)
prob += x + y, ""MinimizeBuses""

# Constraints
prob += 20 * x + 50 * y >= 500   # Student transportation requirement
prob += y <= 0.2 * (x + y)       # Maximum large buses limit

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",20
"A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of 300 per trip. Each van can take 500 patties at a cost of 100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of 12500. How should they plan their shipment to minimize the total number of trips?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTrips"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of trucks
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of vans

# Objective function: minimize x + y (total trips)
prob += x + y, ""MinimizeTrips""

# Constraints
prob += 1000 * x + 500 * y >= 50000   # Patties shipment requirement
prob += 300 * x + 100 * y <= 12500    # Budget constraint
prob += x <= y                       # Truck limit (x <= y)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",75
"A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeFlowers"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small bouquets
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large bouquets

# Objective function: maximize 5x + 10y (total number of flowers)
prob += 5*x + 10*y, ""MaximizeFlowers""

# Constraints
prob += x <= 80                 # Maximum small bouquets
prob += y <= 50                 # Maximum large bouquets
prob += x + y <= 70             # Total bouquets limit
prob += y >= 20                 # Minimum large bouquets
prob += x >= 2*y                # Small bouquets at least twice as many as large bouquets

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",465
"A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeDieselUsage"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of trips by new company
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of trips by old company

# Objective function: minimize 30x + 40y (total diesel usage)
prob += 30*x + 40*y, ""MinimizeDieselUsage""

# Constraints
prob += 50*x + 70*y >= 1000   # Gift delivery requirement
prob += x <= 15              # Maximum trips by new company
prob += y >= 0.4 * (x + y)   # Minimum trips by old company (40% constraint)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",580
"A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTransportTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of bus trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of car trips

# Objective function: minimize 30x + 15y (total time)
prob += 30*x + 15*y, ""MinimizeTransportTime""

# Constraints
prob += 20*x + 6*y >= 300   # Monkey transportation requirement
prob += x <= 10             # Maximum bus trips
prob += y >= 0.6 * (x + y)  # Minimum car trips (60% constraint)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",555
A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?,"import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePollution"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of helicopter trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of truck trips

# Objective function: minimize 5x + 10y (total pollution)
prob += 5*x + 10*y, ""MinimizePollution""

# Constraints
prob += 3*x + 7*y >= 80   # Cow transportation requirement
prob += y <= 8            # Maximum truck trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",120
"A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeSandDelivery"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small containers
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large containers

# Objective function: maximize 20x + 50y (total amount of sand)
prob += 20*x + 50*y, ""MaximizeSandDelivery""

# Constraints
prob += x + 3*y <= 100    # Personnel constraint
prob += x >= 5            # Minimum 5 small containers
prob += y >= 3            # Minimum 3 large containers
prob += x >= 3*y          # Ratio constraint (small containers thrice the large containers)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1970
"A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeMealsDelivery"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of electric bikes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of scooters

# Objective function: maximize 8x + 5y (total number of meals delivered)
prob += 8*x + 5*y, ""MaximizeMealsDelivery""

# Constraints
prob += 3*x + 2*y <= 200    # Charge constraint
prob += x <= 0.3 * (x + y)  # Maximum bikes constraint (30% of electric vehicles)
prob += y >= 20             # Minimum scooters constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",513
"A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePlanes"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of large planes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of small planes

# Objective function: minimize x + y (total number of planes)
prob += x + y, ""MinimizePlanes""

# Constraints
prob += 30*x + 10*y >= 300   # Car delivery requirement
prob += y - x >= 1           # Relationship between large and small planes (y > x)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",16
"A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeWagons"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small wagons
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large wagons

# Objective function: minimize x + y (total number of wagons)
prob += x + y, ""MinimizeWagons""

# Constraints
prob += 20*x + 50*y >= 2000   # Ore delivery requirement
prob += x >= 2*y              # Relationship between small and large wagons
prob += y >= 10               # Minimum number of large wagons

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",67
"A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeScooters"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of scooters
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of rickshaws

# Objective function: minimize x (total number of scooters)
prob += x, ""MinimizeScooters""

# Constraints
prob += 2*x + 3*y >= 300   # Visitor transportation requirement
prob += y <= 0.4 * (x + y)  # Pollution constraint (at most 40% can be rickshaws)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",75
"A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeAnimals"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of camels
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of horses

# Objective function: minimize x + y (total number of animals)
prob += x + y, ""MinimizeAnimals""

# Constraints
prob += 50*x + 60*y >= 1000   # Package delivery requirement
prob += 20*x + 30*y <= 450    # Food availability constraint
prob += y <= x                # Relationship constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",19
"A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?","#miss matching
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Snacks_Delivered"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of small suitcases
y = LpVariable('y', lowBound=0, cat='Integer')  # number of large suitcases

# Objective function
prob += 50 * x + 80 * y, ""Total_Number_of_Snacks""

# Constraints
prob += x >= 2 * y, ""Preference_for_Small_Suitcases""
prob += x <= 70, ""Availability_of_Small_Suitcases""
prob += y <= 50, ""Availability_of_Large_Suitcases""
prob += y >= 15, ""Minimum_Large_Suitcases""
prob += x + y <= 70, ""Total_Suitcases_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{50 * value(x) + 80 * value(y)}"")",4190
"A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeGas"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, upBound=20, cat='Integer')  # number of regular boat trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of speed boat trips

# Objective function: minimize 10x + 20y (total amount of gas consumed)
prob += 10*x + 20*y, ""MinimizeGas""

# Constraints
prob += 20*x + 30*y >= 1000   # Mail delivery requirement
prob += y >= 0.5 * (x + y)   # Speed boat percentage constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",600
"A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?","#miss matching
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Transport_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of bus trips
y = LpVariable('y', lowBound=0, cat='Integer')  # number of car trips

# Objective function
prob += 2 * x + 1.5 * y, ""Total_Time""

# Constraints
prob += 100 * x + 40 * y >= 1200, ""Total_Chicken""
prob += x <= 10, ""Max_Bus_Trips""
prob += y >= 1.5 * x, ""Min_Car_Trips""
prob += x + y >= 0, ""Non-negativity""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{2 * value(x) + 1.5 * value(y)}"")",33.5
"Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?","#miss matching
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Pollution"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of vans
y = LpVariable('y', lowBound=0, cat='Integer')  # number of minibuses

# Objective function
prob += 7 * x + 10 * y, ""Total_Pollution""

# Constraints
prob += 6 * x + 10 * y >= 150, ""Total_Kids""
prob += y <= 10, ""Max_Minibuses""
prob += x >= y + 1, ""Vans_Exceed_Minibuses""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{7 * value(x) + 10 * value(y)}"")",160
"A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?","#miss matching
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Recycling"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of small bins
y = LpVariable('y', lowBound=0, cat='Integer')  # number of large bins

# Objective function
prob += 25 * x + 60 * y, ""Total_Recycling""

# Constraints
prob += 2 * x + 5 * y <= 100, ""Worker_Availability""
prob += x == 3 * y, ""Bin_Ratio""
prob += x >= 10, ""Min_Small_Bins""
prob += y >= 4, ""Min_Large_Bins""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{25 * value(x) + 60 * value(y)}"")",1215
"A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeGifts"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of seasonal volunteers
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of full-time volunteers

# Objective function: maximize 5x + 8y (total gifts delivered)
prob += 5*x + 8*y, ""MaximizeGifts""

# Constraints
prob += 2*x + 5*y <= 200   # Points constraint
prob += x <= 0.3*(x + y)   # Seasonal volunteers constraint
prob += y >= 10            # Full-time volunteers constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",342
"A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Jars"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of small jars
y = LpVariable('y', lowBound=0, cat='Integer')  # number of large jars

# Objective function
prob += x + y, ""Total_Jars""

# Constraints
prob += 50 * x + 200 * y >= 100000, ""Total_Volume""
prob += y <= x, ""Large_Jars_Limit""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(x) + value(y)}"")",800
"A corn farmer sends his corn to the city by either tractor or car. A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeVehicles"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of tractors
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of cars

# Objective function: minimize x + y (total number of vehicles)
prob += x + y, ""MinimizeVehicles""

# Constraints
prob += 40*x + 20*y >= 500   # Capacity constraint
prob += y >= 2*x             # Ordering constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",19
"A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeBikes"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of bikes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of cars

# Objective function: minimize x (total number of bikes)
prob += x, ""MinimizeBikes""

# Constraints
prob += 3*x + 5*y >= 500   # Capacity constraint
prob += y <= 0.4*(x + y)   # Proportion constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",80
"An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs 1000. Each ultrawide truck can transport 6 tires per trip and costs 700. The company needs to transport at least 200 tires and has available 22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTrips"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of cargo plane trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of ultrawide truck trips

# Objective function: minimize x + y (total number of trips)
prob += x + y, ""MinimizeTotalTrips""

# Constraints
prob += 10*x + 6*y >= 200   # Transportation constraint
prob += 1000*x + 700*y <= 22000  # Budget constraint
prob += x <= y              # Proportion constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",26
"A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeWaterTransport"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')  # number of small kegs used
y = pulp.LpVariable('y', lowBound=0, cat='Integer')  # number of large kegs used

# Objective function: maximize 40x + 100y (total amount of water transported)
prob += 40*x + 100*y, ""MaximizeWaterTransport""

# Constraints
prob += x + y <= 25  # Total number of kegs constraint
prob += x <= 30      # Small kegs availability
prob += y <= 10      # Large kegs availability
prob += x >= 2*y     # Proportion constraint
prob += y >= 5       # Minimum large kegs constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1480
"A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Gas"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=6, cat='Integer')  # number of submarine trips
y = LpVariable('y', lowBound=0, cat='Integer')  # number of boat trips

# Objective function
prob += 30 * x + 25 * y, ""Total_Gas_Used""

# Constraints
prob += 100 * x + 80 * y >= 1000, ""Total_Mail""
prob += y >= 0.5 * (x + y), ""Proportion_of_Boat_Trips""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(30*x + 25*y)}"")",310
"The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, upBound=5, cat='Integer')  # number of helicopter trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')            # number of car trips

# Objective function: minimize 40x + 30y (total time needed)
prob += 40*x + 30*y, ""MinimizeTime""

# Constraints
prob += 30*x + 20*y >= 300  # Number of fish constraint
prob += 1.5*x <= y          # Minimum car trips constraint (at least 60% of trips must be by car)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",430
A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?,"import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePollution"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, upBound=10, cat='Integer')  # number of hot-air balloon rides
y = pulp.LpVariable('y', lowBound=0, cat='Integer')             # number of gondola lift rides

# Objective function: minimize 10x + 15y (total pollution produced)
prob += 10*x + 15*y, ""MinimizePollution""

# Constraints
prob += 4*x + 6*y >= 70  # Number of visitors constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",175
"A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice. The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeRiceTransport"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=5, cat='Integer')   # number of medium sized carts
y = pulp.LpVariable('y', lowBound=5, cat='Integer')   # number of large sized carts

# Objective function: maximize 30x + 70y (amount of rice transported)
prob += 30*x + 70*y, ""MaximizeRiceTransport""

# Constraints
prob += 2*x + 4*y <= 60  # Number of horses constraint
prob += x == 3*y         # Medium to large cart ratio constraint

# Solve the problem
prob.solve()

# Print the results
if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",960
"A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeNewspapersDelivered"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of labradors
y = pulp.LpVariable('y', lowBound=50, cat='Integer')  # number of golden retrievers

# Objective function: maximize 7x + 10y (number of newspapers delivered)
prob += 7*x + 10*y, ""MaximizeNewspapersDelivered""

# Constraints
prob += 5*x + 6*y <= 1500  # Treats constraint
prob += x <= 0.6*(x + y)   # Labrador to golden retriever ratio constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",2500
"A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeAnimalsUsed"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of cows
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of elephants

# Objective function: minimize x + y (total number of animals)
prob += x + y, ""MinimizeAnimalsUsed""

# Constraints
prob += 20*x + 50*y >= 1000  # Capacity constraint (at least 1000 bricks)
prob += y <= x               # Elephant limitation (number of elephants <= number of cows)
prob += x <= 2*y             # Ratio constraint (number of cows <= 2 * number of elephants)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",29
"A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTrips"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of ferry trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of light rail trips

# Objective function: minimize x + y (total number of trips)
prob += x + y, ""MinimizeTrips""

# Constraints
prob += 20*x + 15*y >= 500  # Capacity constraint (at least 500 boxes of corn)
prob += y >= 4*x            # Relation constraint (light rail trips >= 4 * ferry trips)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",32
"A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTaxiRides"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of taxi rides
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of company car rides

# Objective function: minimize x (total number of taxi rides)
prob += x, ""MinimizeTaxiRides""

# Constraints
prob += 2*x + 3*y >= 500   # Capacity constraint (at least 500 employees need transportation)
prob += y <= 0.6 * (x + y) # Percentage constraint (at most 60% of the rides can be company car rides)
prob += y >= 30            # Minimum number of company car rides constraint (at least 30 company car rides)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",78
"A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of 500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of 200. The company needs to transport at least 1000 cubic meters of hydrogen and they have budget of 3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?","#solution not found
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Trips"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of trips using high-pressure tube trailers
y = LpVariable('y', lowBound=0, cat='Integer')  # number of trips using liquefied hydrogen tankers

# Objective function
prob += x + y, ""Total_Trips""

# Constraints
prob += 50 * x + 30 * y >= 1000, ""Hydrogen_Transport""
prob += 500 * x + 200 * y <= 3750, ""Budget""
prob += x <= y-1, ""Transport_Method""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500. Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?","#
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Grapes_Transportation"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=100, cat='Integer')  # number of small crates
y = LpVariable('y', lowBound=10, upBound=50, cat='Integer')  # number of large crates

# Objective function
prob += 200 * x + 500 * y, ""Total_Grapes_Transported""

# Constraints
prob += x + y <= 60, ""Total_Crates""
prob += x >= 3 * y, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(200 * x + 500 * y)}"")",16500
"A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeGasConsumption"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, upBound=5, cat='Integer')   # Number of truck trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')             # Number of car trips

# Objective function: minimize 20x + 15y (total gas consumption)
prob += 20*x + 15*y, ""MinimizeGasConsumption""

# Constraints
prob += 50*x + 30*y >= 500   # Number of packages constraint
prob += y >= 0.3*(x + y)     # Minimum percentage of car trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",230
"There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTransportTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of helicopter trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of bus trips

# Objective function: minimize 1x + 3y (total transport time)
prob += 1*x + 3*y, ""MinimizeTransportTime""

# Constraints
prob += 5*x + 8*y >= 120   # Number of patients constraint
prob += x >= 0.3*(x + y)   # Minimum percentage of helicopter trips
prob += y <= 10            # Maximum number of bus trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",24
"Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePollution"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of car-pool trips
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of bus trips

# Objective function: minimize 10x + 30y (total pollution)
prob += 10*x + 30*y, ""MinimizePollution""

# Constraints
prob += 4*x + 20*y >= 300   # Number of employees constraint
prob += y <= 4              # Maximum number of bus trips

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",670
"A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 30 people. In addition, because some neighbourhood don’t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?","#solution not found
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Snow_Transportation"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=10, cat='Integer')  # number of small trucks
y = LpVariable('y', lowBound=3, cat='Integer')   # number of large trucks

# Objective function
prob += 30 * x + 50 * y, ""Total_Snow_Transported""

# Constraints
prob += 2 * x + 4 * y <= 30, ""Total_Workers""
prob += x == 2 * y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service. At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeLettersSent"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=20, cat='Integer')   # Number of carrier pigeons (at least 20)
y = pulp.LpVariable('y', lowBound=0, cat='Integer')    # Number of owls

# Objective function: maximize 2x + 5y (total number of letters sent)
prob += 2*x + 5*y, ""MaximizeLettersSent""

# Constraints
prob += 3*x + 5*y <= 1000     # Treats constraint
prob += y <= 0.4*(x + y)      # Percentage constraint on owls
prob += x >= 20               # Minimum number of carrier pigeons

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",841
"An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.","# miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Ships"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of large ships
y = LpVariable('y', lowBound=0, cat='Integer')  # number of small ships

# Objective function
prob += x + y, ""Total_Ships""

# Constraints
prob += 500 * x + 200 * y >= 3000, ""Total_Containers""
prob += x <= y, ""Large_Ships_Limit""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",9
"A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeVesselsUsed"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of canoes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of diesel boats

# Objective function: minimize x + y (total number of vessels)
prob += x + y, ""MinimizeVesselsUsed""

# Constraints
prob += 10*x + 15*y >= 1000    # Fish transportation requirement
prob += x >= 3*y               # Relation constraint between canoes and diesel boats

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",89
"A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people. They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCarsUsed"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of vans
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of cars

# Objective function: minimize y (total number of cars used)
prob += y, ""MinimizeCarsUsed""

# Constraints
prob += 6*x + 3*y >= 200    # Transportation requirement
prob += x <= 0.3*(x + y)    # Limit on vans (at most 30% of total vehicles)

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",37
"A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs 6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of hamburgers
y = LpVariable('y', lowBound=0, cat='Integer')  # number of chicken wraps

# Objective function
prob += 6.5*x + 4*y, ""Total_Cost""

# Constraints
prob += 800*x + 450*y >= 2200, ""Calories""
prob += 19*x + 12*y >= 50, ""Protein""
prob += 20*x + 10*y >= 70, ""Carbs""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",23.5
"A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is 150 and the profit per batch of pork ribs is 300, how many batches of each should be made to maximize profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of batches of hams
y = LpVariable('y', lowBound=0, cat='Integer')  # number of batches of pork ribs

# Objective function
prob += 150*x + 300*y, ""Total_Profit""

# Constraints
prob += 4*x + 2*y <= 4000, ""Slicer_Time""
prob += 2.5*x + 3.5*y <= 4000, ""Packer_Time""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",342750
"An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is 400 and the profit per stove is 260, how many of each should they sell in order to maximize profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of refrigerators to sell
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of stoves to sell

# Objective function: maximize 400*x + 260*y (total profit)
prob += 400*x + 260*y, ""TotalProfit""

# Constraints
prob += 60*x + 45*y <= 20000    # Mover time constraint
prob += 20*x + 25*y <= 13000    # Setup time constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",133200
"An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is 100 and the profit per drawer is 90, how many of each should the company make to maximize profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of desks to produce
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of drawers to produce

# Objective function: maximize 100*x + 90*y (total profit)
prob += 100*x + 90*y, ""TotalProfit""

# Constraints
prob += 40*x + 30*y <= 4000    # Assembly time constraint
prob += 20*x + 10*y <= 3500    # Sanding time constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",11980
"A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is 7.5 and the profit from each bottle of matcha milk tea sold is 5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of bottles of black milk tea
y = LpVariable('y', lowBound=0, cat='Integer')  # number of bottles of matcha milk tea

# Objective function
prob += 7.5*x + 5*y, ""Total_Profit""

# Constraints
prob += 600*x + 525*y <= 30000, ""Milk_Constraint""
prob += 10*x + 5*y <= 500, ""Honey_Constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",375
A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs 1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs 2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?,"import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCost"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of glasses of milk
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of plates of vegetables

# Objective function: minimize x + 2*y (total cost)
prob += x + 2*y, ""TotalCost""

# Constraints
prob += 40*x + 15*y >= 100    # Calcium constraint
prob += 25*x + 30*y >= 50     # Iron constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",3
Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs 5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs 2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.,"#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cost_Diet"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # servings of noodles
y = LpVariable('y', lowBound=0, cat='Integer')  # servings of protein bars

# Objective function
prob += 5*x + 2.5*y, ""Total_Cost""

# Constraints
prob += 600*x + 250*y >= 2000, ""Calorie_Constraint""
prob += 1.5*x + 5*y >= 16, ""Protein_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",20
A toy store sells plush toys and dolls. Each plush toy costs the store 3 and each doll costs the store 2. The store owner can spend at most 700 on inventory. Each plush toy is then sold for a profit of 4 while each doll is sold for a profit of 2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?,"#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=90, upBound=190, cat='Integer')  # number of plush toys
y = LpVariable('y', lowBound=0, cat='Integer')  # number of dolls

# Objective function
prob += 4*x + 2*y, ""Total_Profit""

# Constraints
prob += 3*x + 2*y <= 700, ""Budget_Constraint""
prob += y <= 2*x, ""Dolls_Relation_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",890
"Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of 4 and a package of music paper at a profit of 2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # reams of graph paper
y = LpVariable('y', lowBound=0, cat='Integer')  # reams of music paper

# Objective function
prob += 4*x + 2.5*y, ""Total_Profit""

# Constraints
prob += 3*x + 1.5*y <= 350, ""Printing_Machine_Constraint""
prob += 5.5*x + 3*y <= 350, ""Scanning_Machine_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",290.5
"Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is 14 and the cost per health supplement for health supplement B is 25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cost"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # servings of health supplement A
y = LpVariable('y', lowBound=0, cat='Integer')  # servings of health supplement B

# Objective function
prob += 14*x + 25*y, ""Total_Cost""

# Constraints
prob += 30*x + 60*y >= 400, ""Calcium_Constraint""
prob += 50*x + 10*y >= 50, ""Magnesium_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",175
"Lucy has a dog and she wants his food to be mixed. In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs 20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCost"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of bags of regular brand
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of bags of premium brand

# Objective function: minimize 20x + 35y (total cost)
prob += 20*x + 35*y, ""TotalCost""

# Constraints
prob += 4*x + 12*y >= 15    # Calcium constraint
prob += 7*x + 10*y >= 20    # Vitamin mix constraint
prob += 10*x + 16*y >= 20   # Protein constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",70
"Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of 550, each tank of non-sticky oil produces a net revenue of 750, and each tank of heavy oil produces a net revenue of 950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Revenue"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # tanks of light oil
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # tanks of non-sticky oil
x3 = LpVariable('x3', lowBound=0, cat='Continuous')  # tanks of heavy oil

# Objective function
prob += 550*x1 + 750*x2 + 950*x3, ""Total_Net_Revenue""

# Constraints
prob += 3*x1 + 6*x2 + 9*x3 <= 250, ""Compound_A_Constraint""
prob += 3*x1 + 2*x2 + 3*x3 <= 150, ""Compound_B_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",37083.33315
"A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a 2.1 profit and a square foot of carpets yields a 3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=15000, upBound=40000, cat='Continuous')   # Square feet of laminate planks
y = pulp.LpVariable('y', lowBound=5000, upBound=20000, cat='Continuous')   # Square feet of carpets

# Objective function: maximize 2.1*x + 3.3*y (total profit)
prob += 2.1*x + 3.3*y, ""TotalProfit""

# Constraints
prob += x + y >= 50000   # Shipping contract constraint
# Demand constraints are already included in variable bounds

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",150000
"A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium. The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is 2 and the cost per pill of supplement B is 3, how many of each should he buy to minimize costs?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCost"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of pills of supplement A
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of pills of supplement B

# Objective function: minimize 2*x + 3*y (total cost)
prob += 2*x + 3*y, ""TotalCost""

# Constraints
prob += 5*x + 4*y >= 40   # Iron requirement constraint
prob += 10*x + 15*y >= 50   # Calcium requirement constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",16
A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of 30 each and premium handbags at a profit of 180 each. The total monthly cost of manufacturing is 200 per regular handbag and 447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?,"import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of regular handbags sold per month
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of premium handbags sold per month

# Objective function: maximize 30*x + 180*y (total profit)
prob += 30*x + 180*y, ""TotalProfit""

# Constraints
prob += 200*x + 447*y <= 250000   # Budget constraint
prob += x + y <= 475   # Sales constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",85500
"A woman has 100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be 1.2 for basketball tournament, 0.5 for horse race, and 0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Average_Payout"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Continuous')  # amount of money on basketball tournament
x2 = LpVariable('x2', lowBound=0, cat='Continuous')  # amount of money on horse race
x3 = LpVariable('x3', lowBound=0, cat='Continuous')  # amount of money on soccer game

# Objective function
prob += 1.2*x1 + 0.5*x2 + 0.1*x3, ""Average_Payout""

# Constraints
prob += x1 + x2 + x3 <= 100000, ""Budget_Constraint""
prob += 0.5*x1 + 0.25*x2 + 0.1*x3 <= 0.3*100000, ""Risk_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",72000
"A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him 250 and each freezer repaired earns his 375, how many of each appliance should he fix to maximize his earnings?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeEarnings"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')   # Number of washing machines repaired
x2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')   # Number of freezers repaired

# Objective function: maximize 250*x1 + 375*x2 (earnings)
prob += 250*x1 + 375*x2, ""TotalEarnings""

# Constraints
prob += 30*x1 + 20*x2 <= 5000   # Inspection time constraint
prob += 90*x1 + 125*x2 <= 20000   # Fixing time constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",60000
"A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is 12, the profit per sponge cake is 10, and the profit per birthday cake is 15, how many of each should the bakery make to maximize their profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')   # Number of crepe cakes
x2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')   # Number of sponge cakes
x3 = pulp.LpVariable('x3', lowBound=0, cat='Integer')   # Number of birthday cakes

# Objective function: maximize 12*x1 + 10*x2 + 15*x3 (profit)
prob += 12*x1 + 10*x2 + 15*x3, ""TotalProfit""

# Constraints
prob += 400*x1 + 500*x2 + 450*x3 <= 20000   # Batter constraint
prob += 200*x1 + 300*x2 + 350*x3 <= 14000   # Milk constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",648
"Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is 12 and the profit per kg of the second mix is 15, how many kg of each should be prepared to maximize profit?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Profit"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Integer')  # kg of first mix
x2 = LpVariable('x2', lowBound=0, cat='Integer')  # kg of second mix

# Objective function
prob += 12*x1 + 15*x2, ""Total_Profit""

# Constraints
prob += 0.20*x1 + 0.35*x2 <= 20, ""Cat_Paw_Constraint""
prob += 0.80*x1 + 0.65*x2 <= 50, ""Gold_Shark_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",960
A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of 2.50 each and x2 deluxe tacos at a profit of 3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?,"import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Continuous')   # number of regular tacos
x2 = pulp.LpVariable('x2', lowBound=0, cat='Continuous')   # number of deluxe tacos

# Objective function: maximize 2.50*x1 + 3.55*x2 (profit)
prob += 2.50*x1 + 3.55*x2, ""TotalProfit""

# Constraints
prob += x1 <= 50    # Demand constraint for regular tacos
prob += x2 <= 40    # Demand constraint for deluxe tacos
prob += x1 + x2 <= 70   # Supply constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",217
"A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is 15 and the profit per English workbook is 17, how many of each should the company make to maximize profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of math workbooks
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of English workbooks

# Objective function: maximize 15*x + 17*y (profit)
prob += 15*x + 17*y, ""TotalProfit""

# Constraints
prob += x >= 40    # Demand constraint for math workbooks
prob += y >= 60    # Demand constraint for English workbooks
prob += x <= 140   # Maximum production constraint for math workbooks
prob += y <= 170   # Maximum production constraint for English workbooks
prob += x + y >= 200   # Total workbook production constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",4990
"A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for 2800 and 2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Revenue"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Integer')  # number of full-weighted keyboards
x2 = LpVariable('x2', lowBound=0, cat='Integer')  # number of semi-weighted keyboards

# Objective function
prob += 2800*x1 + 2400*x2, ""Total_Revenue""

# Constraints
prob += 20*x1 + 15*x2 <= 3500
prob += 1.2*x1 + 1.2*x2 <= 6, ""Working_Hours_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",14000
"Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost 550 and 2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is 450 and the profit per commercial version is 1200. If the company does not want to spend more than 400000, how many of each software package should they produce to maximize the profits.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of personal licenses
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of commercial licenses

# Objective function: maximize 450*x + 1200*y (total profit)
prob += 450*x + 1200*y, ""TotalProfit""

# Constraints
prob += x + y <= 300             # Total licenses sold constraint
prob += 550*x + 2000*y <= 400000  # Budget constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",256500
"Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of 5.5 each, and x2 sugar cookies, at a profit of 12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProfit"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')   # number of strawberry cookies
x2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')   # number of sugar cookies

# Objective function: maximize 5.5*x1 + 12*x2 (total profit)
prob += 5.5*x1 + 12*x2, ""TotalProfit""

# Constraints
prob += x1 <= 100          # Daily demand constraint for strawberry cookies
prob += x2 <= 80           # Daily demand constraint for sugar cookies
prob += x1 + x2 <= 100     # Production capacity constraint

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1070
"A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs 1200 and attracts 2000 viewers. On Beta Video, a commercial costs 2000 and attracts 5000 viewers. On Gamma Live, a commercial costs 4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is 20000, how many commercials should be run in each of the three possible choices in order to maximize audience?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Audience_Reach"", LpMaximize)

# Define decision variables
x1 = LpVariable('x1', lowBound=0, cat='Integer')  # number of commercials on Pi TV
x2 = LpVariable('x2', lowBound=0, upBound=8, cat='Integer')  # number of commercials on Beta Video
x3 = LpVariable('x3', lowBound=0, cat='Integer')  # number of commercials on Gamma Live

# Objective function
prob += 2000*x1 + 5000*x2 + 9000*x3, ""Total_Audience_Reach""

# Constraints
prob += 1200*x1 + 2000*x2 + 4000*x3 <= 20000, ""Budget_Constraint""
prob += x3 <= (1/3)*(x1 + x2 + x3), ""Gamma_Live_Proportion_Constraint""
prob += x1 >= 0.2*(x1 + x2 + x3), ""Pi_TV_Proportion_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",46000
"A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Patients_Seen"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of temperature checks
y = LpVariable('y', lowBound=0, cat='Integer')  # number of blood tests

# Objective function
prob += x + y, ""Total_Patients_Seen""

# Constraints
prob += 2*x + 10*y <= 22000, ""Staff_Minutes_Constraint""
prob += y >= 45, ""Minimum_Blood_Tests_Constraint""
prob += x >= 5*y, ""Temperature_Check_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",10820
"The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePipes"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=5, cat='Integer')   # number of wide pipes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of narrow pipes

# Objective function: minimize x + y (total number of pipes)
prob += x + y, ""MinimizePipes""

# Constraints
# Water transport constraint: 25x + 15y >= 900
prob += 25*x + 15*y >= 900, ""WaterTransportConstraint""

# Logistics constraint: x <= (1/3) * y
prob += x <= (1/3) * y, ""LogisticsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",52
"A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeWorkers"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of carts
y = pulp.LpVariable('y', lowBound=12, cat='Integer')  # number of trolleys (at least 12)

# Objective function: minimize 2x + 4y (total number of workers)
prob += 2*x + 4*y, ""MinimizeWorkers""

# Constraints
# Equipment transport constraint: 5x + 7y >= 100
prob += 5*x + 7*y >= 100, ""EquipmentTransportConstraint""

# Maximum trolleys percentage constraint: y <= 0.4 * (x + y)
prob += y <= 0.4 * (x + y), ""MaxTrolleysPercentageConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",84
"Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeWater"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of bags of subsoil
y = pulp.LpVariable('y', lowBound=10, cat='Integer')  # number of bags of topsoil (at least 10)

# Objective function: minimize 10x + 6y (total units of water)
prob += 10*x + 6*y, ""MinimizeWater""

# Constraints
# Total bags constraint: x + y <= 150
prob += x + y <= 150, ""TotalBagsConstraint""

# Maximum topsoil percentage constraint: y <= 0.3 * (x + y)
prob += y <= 0.3 * (x + y), ""MaxTopsoilPercentageConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",300
"An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute. The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeSkiLifts"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of densely-seated ski lifts
y = pulp.LpVariable('y', lowBound=5, cat='Integer')  # number of loosely-seated ski lifts (at least 5)

# Objective function: minimize x + y (total number of ski lifts)
prob += x + y, ""MinimizeSkiLifts""

# Constraints
# Electric supply constraint: 30x + 22y <= 940
prob += 30*x + 22*y <= 940, ""ElectricSupplyConstraint""

# Guest capacity constraint: 45x + 20y >= 1000
prob += 45*x + 20*y >= 1000, ""GuestCapacityConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",25
"A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 3400 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Air_Conditioners"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of low-powered air conditioners
y = LpVariable('y', lowBound=0, cat='Integer')  # number of high-powered air conditioners

# Objective function
prob += x + y, ""Total_Air_Conditioners""

# Constraints
prob += 12*x + 17*y >= 250, ""Cooling_Capacity_Constraint""
prob += 150*x + 250*y <= 3400, ""Electricity_Constraint""
prob += x <= 0.3*(x + y), ""Limit_Low_Powered_Models""
prob += y >= 7, ""Minimum_High_Powered_Models""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeMedicationTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # number of calcium pills
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # number of vitamin D pills
z = pulp.LpVariable('z', cat='Binary')               # binary variable

# Objective function: minimize 5x + 6y (total time for medication to be effective)
prob += 5*x + 6*y, ""MinimizeMedicationTime""

# Constraints
# Total number of pills constraint: x + y >= 130
prob += x + y >= 130, ""TotalNumberConstraint""

# Minimum number of vitamin D pills: y >= 40
prob += y >= 40, ""MinVitaminDConstraint""

# Constraint: x >= y + 1 (ensuring x > y)
prob += x >= y + 1, ""MoreCalciumThanVitaminD""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",690
"An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park 2 in prizes per hour whereas climbing games cost 3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeCustomers"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of throwing games
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of climbing games

# Objective function: maximize 15x + 8y (total customers attracted)
prob += 15*x + 8*y, ""MaximizeCustomers""

# Constraints
# Cost constraint: 2x + 3y <= 100 (total cost of prizes cannot exceed $100)
prob += 2*x + 3*y <= 100, ""CostConstraint""

# Constraint: x >= 2y (at least twice as many throwing games as climbing games)
prob += x >= 2*y, ""TwiceAsManyThrowingAsClimbing""

# Constraint: y >= 5 (at least 5 climbing games)
prob += y >= 5, ""AtLeastFiveClimbingGames""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",670
"In a science fair, there are two types of tables that can be used to display the children’s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeGuests"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of circular tables
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of rectangular tables

# Objective function: maximize 8x + 12y (total number of catered guests)
prob += 8*x + 12*y, ""MaximizeGuests""

# Constraints
# Space constraint: 15x + 20y <= 1900 (total space used cannot exceed 1900 units)
prob += 15*x + 20*y <= 1900, ""SpaceConstraint""

# Participants constraint: 5x + 4y >= 500 (must cater to at least 500 participants)
prob += 5*x + 4*y >= 500, ""ParticipantsConstraint""

# Poster boards constraint: 4x + 4y >= 300 (must cater to at least 300 poster boards)
prob += 4*x + 4*y >= 300, ""PosterBoardsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1080
"An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePipes"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of high-volume pipes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of low-volume pipes

# Objective function: minimize x + y (total number of pipes)
prob += x + y, ""MinimizePipes""

# Constraints
# Demand constraint: 10000x + 5000y >= 150000 (must supply at least 150000 US gallons)
prob += 10000*x + 5000*y >= 150000, ""DemandConstraint""

# Technicians constraint: 12x + 5y <= 160 (total technicians used cannot exceed 160)
prob += 12*x + 5*y <= 160, ""TechniciansConstraint""

# Environmental constraint: x <= 0.35*(x + y) (at most 35% of pipes can be high-volume)
prob += x <= 0.35*(x + y), ""EnvironmentalConstraint""

# Minimum low-volume pipes constraint: y >= 8 (must have at least 8 low-volume pipes)
prob += y >= 8, ""MinimumLowVolumeConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",25
"A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid 300 per shift while graduate researchers are paid 100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 500 hours of ultrasound services to meet needs. If the hospital has a budget of 14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Workers"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of ultrasound technician shifts
y = LpVariable('y', lowBound=0, cat='Integer')  # number of graduate researcher shifts

# Objective function
prob += x + y

# Constraints
prob += 8*x + 5*y >= 500, ""Hours_Ultrasound_Services""
prob += 300*x + 100*y <= 14000, ""Budget_Constraint""
prob += x >= 2*y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizePainKiller"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of molars filled
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of canines filled

# Objective function: minimize 3x + 2.3y (total pain killer used)
prob += 3*x + 2.3*y, ""MinimizePainKiller""

# Constraints
# Resin constraint: 20x + 15y <= 3000 (total resin used must not exceed 3000 units)
prob += 20*x + 15*y <= 3000, ""ResinConstraint""

# Molars constraint: x >= 45 (at least 45 molars must be filled)
prob += x >= 45, ""MolarsConstraint""

# Canines percentage constraint: y >= 0.6*(x + y) (at least 60% of cavities filled must be in canines)
prob += y >= 0.6 * (x + y), ""CaninesPercentageConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",291.4
"A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in 50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in 43 on tips. The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeTips"", pulp.LpMaximize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of shifts on bikes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of shifts on scooters

# Objective function: maximize 50x + 43y (total tips received)
prob += 50*x + 43*y, ""MaximizeTips""

# Constraints
# Total shifts constraint: x + y <= 40 (total shifts scheduled must not exceed 40)
prob += x + y <= 40, ""TotalShiftsConstraint""

# Energy constraint: 5x + 6y <= 230 (total units of energy used must not exceed 230)
prob += 5*x + 6*y <= 230, ""EnergyConstraint""

# Orders constraint: 10x + 7y >= 320 (at least 320 orders must be delivered)
prob += 10*x + 7*y >= 320, ""OrdersConstraint""

# Scooter minimum constraint: y >= 5 (at least 5 shifts must be on scooters)
prob += y >= 5, ""ScooterMinimumConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1965
"A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeConcerts"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of pop concerts
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of R&B concerts

# Objective function: minimize x + y (total number of concerts)
prob += x + y, ""MinimizeConcerts""

# Constraints
# Audience constraint: 100x + 240y >= 10000 (total audience must be at least 10000)
prob += 100*x + 240*y >= 10000, ""AudienceConstraint""

# Practice days constraint: 2x + 4y <= 180 (total practice days must not exceed 180)
prob += 2*x + 4*y <= 180, ""PracticeDaysConstraint""

# Type constraint: y <= 0.4(x + y) (at most 40% of concerts can be R&B)
prob += y <= 0.4*(x + y), ""TypeConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",65
"A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeBakingTime"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of large pizzas
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of medium pizzas

# Objective function: minimize 12x + 8y (total baking time)
prob += 12*x + 8*y, ""MinimizeBakingTime""

# Constraints
# Dough constraint: 12x + 8y >= 10000 (at least 10000 units of dough)
prob += 12*x + 8*y >= 10000, ""DoughConstraint""

# Toppings constraint: 5x + 4y >= 4400 (at least 4400 units of toppings)
prob += 5*x + 4*y >= 4400, ""ToppingsConstraint""

# Medium pizzas constraint: y >= 200 (at least 200 medium pizzas)
prob += y >= 200, ""MediumPizzasConstraint""

# Preference constraint: x >= 2y (at least twice as many large pizzas as medium pizzas)
prob += x >= 2*y, ""PreferenceConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",10060
"A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeVehicles"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of limousines
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of buses

# Objective function: minimize x + y (total number of vehicles)
prob += x + y, ""MinimizeVehicles""

# Constraints
# People constraint: 12x + 18y >= 400 (at least 400 people transported)
prob += 12*x + 18*y >= 400, ""PeopleConstraint""

# Limousine preference constraint: x >= 0.7*(x + y) (at least 70% of vehicles are limousines)
prob += x >= 0.7 * (x + y), ""LimousinePreferenceConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",30
"A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.","from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Patients_Treated"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of prevention pills
y = LpVariable('y', lowBound=0, cat='Integer')  # number of treatment pills

# Objective function
prob += x + y, ""Patients_Treated""

# Constraints
prob += 15*x + 25*y <= 10000, ""Budget_Constraint""
prob += x >= 2*y, ""Prevention_Treatment_Ratio""
prob += y >= 50, ""Minimum_Treatment_Pills""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",633
"A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Refills"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of servers delivering by cart
y = LpVariable('y', lowBound=0, cat='Integer')  # number of servers delivering by hand

# Objective function
prob += 5*x + 20*y, ""Total_Refills""

# Constraints
prob += 70*x + 85*y >= 4000, ""Customer_Interactions""
prob += x >= 0.7*(x + y), ""Delivery_Preference""
prob += y >= 3, ""Minimum_Hand_Delivery""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",330
"A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeSodiumIntake"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of bowls of salmon
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of bowls of eggs

# Objective function: minimize sodium intake (80x + 20y)
prob += 80*x + 20*y, ""MinimizeSodiumIntake""

# Constraints
# Calorie constraint: 300x + 200y >= 2000
prob += 300*x + 200*y >= 2000, ""CalorieRequirement""

# Protein constraint: 15x + 8y >= 90
prob += 15*x + 8*y >= 90, ""ProteinRequirement""

# Egg limit constraint: y <= 0.4(x + y)
prob += y <= 0.4 * (x + y), ""EggLimitConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",460
"A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?","#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Cooking_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of original meals
y = LpVariable('y', lowBound=0, cat='Integer')  # number of experimental meals

# Objective function
prob += 10*x + 15*y, ""Total_Cooking_Time""

# Constraints
prob += 20*x + 25*y <= 800, ""Food_Waste_Constraint""
prob += 45*x + 35*y <= 900, ""Wrapping_Waste_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day. The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeEquipment"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of chop saws
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of steel cutters

# Objective function: minimize total number of equipment (x + y)
prob += x + y, ""MinimizeEquipment""

# Constraints
# Metal cutting capacity constraint: 25x + 5y >= 520
prob += 25*x + 5*y >= 520, ""MetalCuttingCapacity""

# Waste generation constraint: 25x + 3y <= 400
prob += 25*x + 3*y <= 400, ""WasteGenerationConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",72
"A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Pollution"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=7, cat='Integer')  # number of large cruise ship trips
y = LpVariable('y', lowBound=0, cat='Integer')            # number of small cruise ship trips

# Objective function
prob += 20*x + 15*y, ""Total_Pollution""

# Constraints
prob += 2000*x + 800*y >= 20000, ""Customer_Constraint""
prob += y >= 0.4*(x + y), ""Mix_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective):.0f}"")",260
"A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeLightChanges"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of LED fixtures
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of fluorescence lamps

# Objective function: minimize total number of light changes (3x + 4y)
prob += 3*x + 4*y, ""MinimizeLightChanges""

# Constraints
# Total number of light fixtures constraint: x + y >= 300
prob += x + y >= 300, ""TotalLightFixturesConstraint""

# Maximum electricity consumption constraint: 5x + 8y <= 2000
prob += 5*x + 8*y <= 2000, ""MaxElectricityConstraint""

# Proportion of fluorescence lamps constraint: y >= 0.3 * (x + y)
prob += y >= 0.3 * (x + y), ""ProportionFluorescenceLampsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",990
"A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 35 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?","#No solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Jam_Units"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=35, cat='Integer')  # number of sets of small packets
y = LpVariable('y', lowBound=0, cat='Integer')   # number of jugs

# Objective function
prob += x + y, ""Total_Units_of_Jam""

# Constraints
prob += 1000*x + 1250*y <= 65000, ""Total_Jam_Constraint""
prob += y >= 3*x, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?","#No solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Potassium_Intake"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of salads
y = LpVariable('y', lowBound=0, cat='Integer')  # number of fruit bowls

# Objective function
prob += 2*x + 8*y, ""Total_Potassium_Intake""

# Constraints
prob += 7*x + 15*y >= 90, ""Vitamin_Constraint""
prob += 12*x + 3*y >= 110, ""Fibre_Constraint""
prob += 7*y <= 3*x, ""Fruit_Bowl_Limitation""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective):.0f}"")",0
"A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeStores"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of retail stores
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of factory outlets

# Objective function: minimize total number of stores (x + y)
prob += x + y, ""MinimizeStores""

# Constraints
# Customer constraint: 200x + 80y >= 1200
prob += 200*x + 80*y >= 1200, ""CustomerConstraint""

# Employee constraint: 6x + 4y <= 50
prob += 6*x + 4*y <= 50, ""EmployeeConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",6
"A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to maximize the total number of units produced?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Total_Units_Produced"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of cans
y = LpVariable('y', lowBound=0, cat='Integer')  # number of glass bottles

# Objective function
prob += x + y, ""Total_Units_Produced""

# Constraints
prob += 250*x + 1000*y >= 1000000, ""Soda_Volume_Constraint""
prob += x >= 3*y, ""Ratio_Cans_to_Bottles""
prob += y >= 100, ""Minimum_Bottles_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is 300 while the cost over air for each trip is 550. The company needs to transport at least 200 tons of candles and they have a budget of 20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTrips"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of trips by freight
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of trips by air

# Objective function: minimize total number of trips (x + y)
prob += x + y, ""MinimizeTrips""

# Constraints
# Transportation capacity constraint: 5x + 3y >= 200
prob += 5*x + 3*y >= 200, ""TransportationCapacityConstraint""

# Budget constraint: 300x + 550y <= 20000
prob += 300*x + 550*y <= 20000, ""BudgetConstraint""

# Air transportation requirement: y >= 0.3 * (x + y)
prob += y >= 0.3 * (x + y), ""AirTransportationRequirement""

# Minimum trips by freight constraint: x >= 5
prob += x >= 5, ""MinimumFreightTripsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",46
"A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeParkingSpots"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of large mobile production units
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of small mobile production units

# Objective function: minimize total number of parking spots (2x + y)
prob += 2*x + y, ""MinimizeParkingSpots""

# Constraints
# Capacity constraint: 6x + 2y >= 80
prob += 6*x + 2*y >= 80, ""CapacityConstraint""

# Minimum small mobile units constraint: y >= 5
prob += y >= 5, ""MinimumSmallMobileUnitsConstraint""

# Percentage constraint for large mobile units: x >= 0.75 * (x + y)
prob += x >= 0.75 * (x + y), ""PercentageConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",35
"A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeBoxes"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of small boxes
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of large boxes

# Objective function: minimize total number of boxes (x + y)
prob += x + y, ""MinimizeBoxes""

# Constraints
# Capacity constraint: 25x + 45y >= 750
prob += 25*x + 45*y >= 750, ""CapacityConstraint""

# Minimum large boxes constraint: y >= 5
prob += y >= 5, ""MinimumLargeBoxesConstraint""

# Ratio constraint for small and large boxes: x >= 3y
prob += x >= 3*y, ""RatioConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",26
"Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Grain_Transport"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of large bags
y = LpVariable('y', lowBound=0, cat='Integer')  # number of tiny bags

# Objective function
prob += 25*x + 6*y, ""Total_Grain_Weight_Transported""

# Constraints
prob += 4*x + 1.5*y <= 110, ""Energy_Constraint""
prob += x >= 2*y, ""Ratio_Bags_Constraint""
prob += y >= 20, ""Minimum_Tiny_Bags_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Car_Processing"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=15, cat='Integer')  # number of automatic electric jacks
y = LpVariable('y', lowBound=0, cat='Integer')  # number of gas-powered jacks

# Objective function
prob += 5*x + 4*y, ""Total_Cars_Processed""

# Constraints
prob += 6*x <= 50, ""Electricity_Constraint""
prob += 7*y <= 80, ""Gas_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",84
"A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTransportationUnits"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of trains
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of trams

# Objective function: minimize total number of transportation units (x + y)
prob += x + y, ""MinimizeTransportationUnits""

# Constraints
# Comfortable capacity constraint: 120x + 30y >= 600
prob += 120*x + 30*y >= 600, ""CapacityConstraint""

# Relationship constraint: y >= 2x
prob += y >= 2*x, ""TrainTramRelationship""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",11
"Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeCarbonDioxideConversion"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')   # Number of palladium-heavy catalysts
x2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')   # Number of platinum-heavy catalysts

# Objective function: maximize the amount of carbon dioxide converted
prob += 5*x1 + 4*x2, ""MaximizeCarbonDioxideConversion""

# Constraints
# Platinum constraint: 15x1 + 20x2 <= 450
prob += 15*x1 + 20*x2 <= 450, ""PlatinumConstraint""

# Palladium constraint: 25x1 + 14x2 <= 390
prob += 25*x1 + 14*x2 <= 390, ""PalladiumConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",98
There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?,"import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeMetalExtraction"", pulp.LpMaximize)

# Define variables
x1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')   # Number of times process J is performed
x2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')   # Number of times process P is performed

# Objective function: maximize the amount of metal extracted
prob += 5*x1 + 9*x2, ""MaximizeMetalExtraction""

# Constraints
# Water constraint: 8x1 + 6x2 <= 1500
prob += 8*x1 + 6*x2 <= 1500, ""WaterConstraint""

# Pollution constraint: 3x1 + 5x2 <= 1350
prob += 3*x1 + 5*x2 <= 1350, ""PollutionConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",2250
"An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeSpace"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of escalators
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of elevators

# Objective function: minimize total units of space
prob += 5*x + 2*y, ""MinimizeSpace""

# Constraints
# People transportation capacity constraint: 20x + 8y >= 400
prob += 20*x + 8*y >= 400, ""PeopleCapacityConstraint""

# Escalator-elevator ratio constraint: x >= 3y
prob += x >= 3*y, ""EscalatorElevatorRatioConstraint""

# Minimum elevators constraint: y >= 2
prob += y >= 2, ""MinimumElevatorsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",100
"A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # hours using method A
y = LpVariable('y', lowBound=0, cat='Continuous')  # hours using method B

# Objective function
prob += x + y

# Constraints
prob += 60*x + 65*y <= 3500, ""Special_Element_Constraint""
prob += 25*x + 45*y >= 1400, ""Fabric_Production_Constraint""
prob += 14*x + 25*y >= 1000, ""Plastic_Production_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",40
"A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company 100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company 225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?","#no solution
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Earnings"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of motorcycles
y = LpVariable('y', lowBound=0, cat='Integer')  # number of sedans

# Objective function
prob += 100*x + 225*y, ""Total_Earnings""

# Constraints
prob += x <= 0.25*(x + y), ""Vehicle_Type_Constraint""
prob += 4*x + 15*y <= 200, ""Pollution_Constraint""
prob += 30*x + 70*y >= 1200, ""Passenger_Capacity_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Transport_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of kayak trips
y = LpVariable('y', lowBound=0, cat='Integer')  # number of motorboat trips

# Objective function
prob += 5*x + 3*y, ""Total_Transport_Time""

# Constraints
prob += 4*x + 5*y >= 550, ""Total_Trips_Constraint""
prob += y <= 25, ""Motorboat_Trip_Limit""
prob += x >= 0.75*(x + y), ""Proportion_Kayak_Trips""
prob += x >= 0, ""Non-negativity_x""
prob += y >= 0, ""Non-negativity_y""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective):.2f}"")",610
"A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.","#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Test_Performance"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of blood tests
y = LpVariable('y', lowBound=0, cat='Integer')  # number of ear tests

# Objective function
prob += x + y, ""Total_Tests_Performed""

# Constraints
prob += 30*x + 5*y <= 7525, ""Total_Time_Constraint""
prob += y >= 12, ""Minimum_Ear_Tests""
prob += x >= 3*y, ""Proportion_Blood_Tests""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",316
"A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges 100 per hour and the common company charges 72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCost"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Continuous')   # Hours allocated to specialized company
y = pulp.LpVariable('y', lowBound=0, cat='Continuous')   # Hours allocated to common company

# Objective function: minimize cost
prob += 100*x + 72*y, ""MinimizeCost""

# Constraints
# Minimum number of images constraint: 60x + 40y >= 10000
prob += 60*x + 40*y >= 10000, ""MinimumImagesConstraint""

# Special images constraint: x >= y/2
prob += x >= 0.5*y, ""SpecialImagesConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",16666.667
"A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeCarts"", pulp.LpMinimize)

# Define variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of golf carts
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of pull carts

# Objective function: minimize total number of carts
prob += x + y, ""MinimizeCarts""

# Constraints
# Capacity constraint: 4x + y >= 80
prob += 4*x + y >= 80, ""CapacityConstraint""

# Limit on golf carts: x <= 0.6*(x + y)
prob += 0.4*x - 0.6*y <= 0, ""LimitGolfCarts""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",29
"A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?","#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Water_Usage"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of acai berry smoothies
y = LpVariable('y', lowBound=0, cat='Integer')  # number of banana chocolate smoothies

# Objective function
prob += 3*x + 4*y, ""Total_Water_Usage""

# Constraints
prob += 7*x <= 3500, ""Acai_Berries_Constraint""
prob += 6*y <= 3200, ""Banana_Chocolate_Constraint""
prob += x >= 0.35 * (x + y), ""Smoothie_Proportion_Constraint""
prob += y-1 >= x, ""Banana_Chocolate_More_Than_Acai_Berries""
prob += x >= 0, ""Non-negativity_x""
prob += y >= 0, ""Non-negativity_y""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",18
"A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeSportsEquipment"", pulp.LpMaximize)

# Define decision variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of basketballs
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of footballs

# Objective function: maximize the total number of sports equipment
prob += x + y, ""MaximizeSportsEquipment""

# Constraints
# Materials constraint: 5x + 3y <= 1500
prob += 5*x + 3*y <= 1500, ""MaterialsConstraint""

# Hours constraint: x + 2y <= 750
prob += x + 2*y <= 750, ""HoursConstraint""

# Basketball to football ratio: x >= 3y
prob += x >= 3*y, ""BasketballFootballRatio""

# Minimum football production: y >= 50
prob += y >= 50, ""MinimumFootballProduction""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",333
"A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?","#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Radiation"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of in-vivo experiments
y = LpVariable('y', lowBound=0, cat='Integer')  # number of ex-vivo experiments

# Objective function
prob += 2*x + 3*y, ""Total_Radiation""

# Constraints
prob += 30*x + 45*y <= 400, ""Preparation_Time_Constraint""
prob += 60*x + 30*y <= 500, ""Execution_Time_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeMailDelivery"", pulp.LpMaximize)

# Define decision variables
x = pulp.LpVariable('x', lowBound=4, cat='Integer')   # Number of deliveries by runners
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of deliveries by canoers

# Objective function: maximize total mail delivered
prob += 3*x + 10*y, ""MaximizeMailDelivery""

# Constraints
# Percentage constraint: y <= 0.33 * (x + y)
prob += y <= 0.33 * (x + y), ""PercentageConstraint""

# Total hours constraint: 4x + 2y <= 200
prob += 4*x + 2*y <= 200, ""TotalHoursConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",310
"A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?","import pulp

# Create a LP maximization problem
prob = pulp.LpProblem(""MaximizeProteinIntake"", pulp.LpMaximize)

# Define decision variables
x = pulp.LpVariable('x', lowBound=0, cat='Integer')   # Number of smoothies consumed
y = pulp.LpVariable('y', lowBound=0, cat='Integer')   # Number of protein bars consumed

# Objective function: maximize total protein intake
prob += 2*x + 7*y, ""MaximizeProteinIntake""

# Constraints
# Calories constraint: 300x + 250y <= 2000
prob += 300*x + 250*y <= 2000, ""CaloriesConstraint""

# Protein bars constraint: y >= 2x
prob += y >= 2*x, ""ProteinBarsConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",56
"A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeTotalTime"", pulp.LpMinimize)

# Define decision variables
x = pulp.LpVariable('x', lowBound=0, cat='Continuous')   # Hours for northern factory
y = pulp.LpVariable('y', lowBound=0, cat='Continuous')   # Hours for western factory

# Objective function: minimize total time
prob += x + y, ""MinimizeTotalTime""

# Constraints
# Plastic constraint: 40x + 35y <= 60000
prob += 40*x + 35*y <= 60000, ""PlasticConstraint""

# Production constraints
# Anti-itch injections constraint: 800x + 650y >= 800000
prob += 800*x + 650*y >= 800000, ""AntiItchInjectionsConstraint""

# Topical cream constraint: 700x + 750y >= 700000
prob += 700*x + 750*y >= 700000, ""TopicalCreamConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",1000
"A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_People_Treated"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of batches of medication patches
y = LpVariable('y', lowBound=0, cat='Integer')  # number of batches of antibiotic creams

# Objective function
prob += 3*x + 2*y, ""Total_People_Treated""

# Constraints
prob += 3*x + 5*y <= 530, ""Material_Constraint""
prob += 3*x + 5*y <= 400, ""Time_Constraint""
prob += y >= 2*x, ""Relationship_Constraint""
prob += x + y <= 100, ""Total_Batches_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",214
"A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks. If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Total_Hours"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of camel caravans
y = LpVariable('y', lowBound=0, cat='Integer')  # number of desert trucks

# Objective function
prob += 12*x + 5*y, ""Total_Hours""

# Constraints
prob += 50*x + 150*y >= 1500, ""Goods_Delivery_Requirement""
prob += x >= y, ""Preference_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",136
"A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Gelatine"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of first-dose vaccines
y = LpVariable('y', lowBound=0, cat='Integer')  # number of second-dose vaccines

# Objective function
prob += 20*x + 60*y, ""Total_Gelatine_Used""

# Constraints
prob += 30*x + 65*y <= 35000, ""Antibiotics_Availability""
prob += x >= y, ""First_Dose_More_than_Second_Dose""
prob += y >= 40, ""Minimum_Second_Dose_Vaccines""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",3200
"Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?","import pulp

# Create a LP minimization problem
prob = pulp.LpProblem(""MinimizeMixingTime"", pulp.LpMinimize)

# Define decision variables
x = pulp.LpVariable('x', lowBound=300, cat='Continuous')   # Units of chemical A
y = pulp.LpVariable('y', lowBound=0, cat='Continuous')     # Units of chemical B

# Objective function: minimize the total mixing time
prob += 30*x + 45*y, ""MinimizeMixingTime""

# Constraints
# Total chemicals constraint: x + y >= 1500
prob += x + y >= 1500, ""TotalChemicalsConstraint""

# Ratio constraint: x <= (1/3) * y
prob += x <= (1/3) * y, ""RatioConstraint""

# Solve the problem
prob.solve()

if pulp.LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{pulp.value(prob.objective)}"")",61875
"A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors’ total caloric intake?","#zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Caloric_Intake"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # number of cups of spinach
y = LpVariable('y', lowBound=0, cat='Continuous')  # number of cups of soybeans

# Objective function
prob += 30*x + 100*y, ""Total_Calories""

# Constraints
prob += 100*x + 80*y >= 12000, ""Fibre_Constraint""
prob += 5*x + 12*y >= 300, ""Iron_Constraint""
prob += x >= y, ""Spinach_Must_Exceed_Soybeans""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 250 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Maximize_Keyboards"", LpMaximize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of mechanical keyboards
y = LpVariable('y', lowBound=0, cat='Integer')  # number of standard keyboards

# Objective function
prob += x + y, ""Total_Keyboards""

# Constraints
prob += 5*x + 2*y <= 1000, ""Plastic_Constraint""
prob += 2*x + y <= 250, ""Solder_Constraint""
prob += y >= 30, ""Minimum_Standard_Keyboards""
prob += x >= 5*y, ""Mechanical_to_Standard_Ratio""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
"A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?","from pulp import *

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of sedans
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of buses

# Create a LP problem
prob = LpProblem(""Tourism Company Vehicles"", LpMinimize)

# Objective function
prob += x + y, ""Total number of vehicles""

# Constraints
prob += 10*x + 40*y <= 800, ""Pollution constraint""
prob += 50*x + 250*y >= 4600, ""Capacity constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",19
"A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?","#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Flavouring"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # number of matcha ice cream orders
y = LpVariable('y', lowBound=0, cat='Continuous')  # number of orange sorbet orders

# Objective function
prob += 2*x + 4*y, ""Total_Flavouring_Used""

# Constraints
prob += 4*x <= 600, ""Ice_Cream_Constraint""
prob += 3*y <= 550, ""Water_Constraint""
prob += x >= 0.15 * (x + y), ""Minimum_Matcha_Ice_Cream""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?","from pulp import *

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # Number of buses
y = LpVariable('y', lowBound=0, cat='Integer')  # Number of personal cars

# Create a LP problem
prob = LpProblem(""Daycare Pickup"", LpMinimize)

# Objective function
prob += x + y, ""Total number of vehicles""

# Constraints
prob += 9*x + 4*y >= 100, ""Capacity constraint""
prob += y >= 5, ""Minimum personal cars constraint""
prob += x - y >= 1, ""More buses than personal cars constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",14
"Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # units of coconut oil
y = LpVariable('y', lowBound=0, cat='Continuous')  # units of lavender

# Objective function
prob += 0.7*x + 0.9*y, ""Total_Time""

# Constraints
prob += x >= 300, ""Coconut_Oil_Constraint""
prob += x + y <= 550, ""Total_Ingredients_Constraint""
prob += x <= 3*y, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",300
"A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?","#miss match
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Probes"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of salinity tests
y = LpVariable('y', lowBound=0, cat='Integer')  # number of pH tests

# Objective function
prob += 3*x + 2*y, ""Total_Probes""

# Constraints
prob += y >= 250, ""pH_Tests_Constraint""
prob += x + y >= 400, ""Total_Tests_Constraint""
prob += y <= 1.5*x, ""Ratio_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",1001
"A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars for that week. Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?","from pulp import *

# Create variables
F = LpVariable('F', lowBound=0, cat='Integer')  # Number of full-time staff
P = LpVariable('P', lowBound=0, cat='Integer')  # Number of part-time staff

# Create a LP problem
prob = LpProblem(""Staff Hiring Optimization"", LpMinimize)

# Objective function
prob += F + P, ""Total number of staff hired""

# Constraints
prob += 40*F + 15*P >= 1000, ""Labor hours constraint""
prob += 1280*F + 450*P <= 31500, ""Budget constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",40
"A landscaper has 2500 square feet of grass land in a customer’s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer’s backyard?","# all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Time"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Continuous')  # square feet cut with heavy-duty yard machine
y = LpVariable('y', lowBound=0, cat='Continuous')  # square feet cut with gas lawn mower

# Objective function
prob += 2*x + 5*y, ""Total_Time""

# Constraints
prob += x + y == 2500, ""Total_Area_Constraint""
prob += 3*x + 2*y <= 450, ""Fuel_Constraint""
prob += 12*x + 10*y <= 2000, ""Pollution_Constraint""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",None
A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.,"#all zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Garbage"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, upBound=3, cat='Integer')  # number of wide trails
y = LpVariable('y', lowBound=0, cat='Integer')  # number of narrow trails

# Objective function
prob += 6*x + 3*y, ""Total_Garbage""

# Constraints
prob += 50*x + 20*y <= 225, ""Visitor_Capacity""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",0
"A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?","#zero
from pulp import *

# Create a LP problem
prob = LpProblem(""Minimize_Fruit_Required"", LpMinimize)

# Define decision variables
x = LpVariable('x', lowBound=0, cat='Integer')  # number of units of wine
y = LpVariable('y', lowBound=0, cat='Integer')  # number of units of kombucha

# Objective function
prob += 3*x + 5*y, ""Total_Fruit_Required""

# Constraints
prob += 8*x  <= 7000, ""Water_Constraint""
prob += 7*y <= 9000, ""Tea_Constraint""
prob += x-1 >= y, ""Wine_More_Than_Kombucha""
prob += y >= 0.2*(x + y), ""Minimum_Kombucha_Percentage""

# Solve the problem
prob.solve()

# Check for infeasibility or unboundedness
if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",11
A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) 820. A hospital van can move 15 patients and costs the hospital 550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?,"from pulp import *

# Create variables
x = LpVariable('x', lowBound=0, cat='Integer')  # shifts using type II ambulance
y = LpVariable('y', lowBound=0, cat='Integer')  # shifts using hospital van

# Create a LP problem
prob = LpProblem(""Minimize Hospital Transport Cost"", LpMinimize)

# Objective function
prob += 820*x + 550*y, ""Total cost""

# Constraints
prob += 20*x + 15*y >= 320, ""Patient transportation constraint""
prob += y <= 0.6 * (x + y), ""Shift proportion constraint""

# Solve the problem
prob.solve()

if LpStatus[prob.status] == ""Infeasible"":
    print(None)
else:
    print(f""{value(prob.objective)}"")",12600
